{"ast":null,"code":"\"use strict\";\n\nvar _CoreManager = _interopRequireDefault(require(\"./CoreManager\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * Copyright (c) 2015-present, Parse, LLC.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @flow\n */\n\n\nconst Storage = {\n  async()\n  /*: boolean*/\n  {\n    const controller = _CoreManager.default.getStorageController();\n\n    return !!controller.async;\n  },\n\n  getItem(path\n  /*: string*/\n  )\n  /*: ?string*/\n  {\n    const controller = _CoreManager.default.getStorageController();\n\n    if (controller.async === 1) {\n      throw new Error('Synchronous storage is not supported by the current storage controller');\n    }\n\n    return controller.getItem(path);\n  },\n\n  getItemAsync(path\n  /*: string*/\n  )\n  /*: Promise<string>*/\n  {\n    const controller = _CoreManager.default.getStorageController();\n\n    if (controller.async === 1) {\n      return controller.getItemAsync(path);\n    }\n\n    return Promise.resolve(controller.getItem(path));\n  },\n\n  setItem(path\n  /*: string*/\n  , value\n  /*: string*/\n  )\n  /*: void*/\n  {\n    const controller = _CoreManager.default.getStorageController();\n\n    if (controller.async === 1) {\n      throw new Error('Synchronous storage is not supported by the current storage controller');\n    }\n\n    return controller.setItem(path, value);\n  },\n\n  setItemAsync(path\n  /*: string*/\n  , value\n  /*: string*/\n  )\n  /*: Promise<void>*/\n  {\n    const controller = _CoreManager.default.getStorageController();\n\n    if (controller.async === 1) {\n      return controller.setItemAsync(path, value);\n    }\n\n    return Promise.resolve(controller.setItem(path, value));\n  },\n\n  removeItem(path\n  /*: string*/\n  )\n  /*: void*/\n  {\n    const controller = _CoreManager.default.getStorageController();\n\n    if (controller.async === 1) {\n      throw new Error('Synchronous storage is not supported by the current storage controller');\n    }\n\n    return controller.removeItem(path);\n  },\n\n  removeItemAsync(path\n  /*: string*/\n  )\n  /*: Promise<void>*/\n  {\n    const controller = _CoreManager.default.getStorageController();\n\n    if (controller.async === 1) {\n      return controller.removeItemAsync(path);\n    }\n\n    return Promise.resolve(controller.removeItem(path));\n  },\n\n  getAllKeys()\n  /*: Array<string>*/\n  {\n    const controller = _CoreManager.default.getStorageController();\n\n    if (controller.async === 1) {\n      throw new Error('Synchronous storage is not supported by the current storage controller');\n    }\n\n    return controller.getAllKeys();\n  },\n\n  getAllKeysAsync()\n  /*: Promise<Array<string>>*/\n  {\n    const controller = _CoreManager.default.getStorageController();\n\n    if (controller.async === 1) {\n      return controller.getAllKeysAsync();\n    }\n\n    return Promise.resolve(controller.getAllKeys());\n  },\n\n  generatePath(path\n  /*: string*/\n  )\n  /*: string*/\n  {\n    if (!_CoreManager.default.get('APPLICATION_ID')) {\n      throw new Error('You need to call Parse.initialize before using Parse.');\n    }\n\n    if (typeof path !== 'string') {\n      throw new Error('Tried to get a Storage path that was not a String.');\n    }\n\n    if (path[0] === '/') {\n      path = path.substr(1);\n    }\n\n    return 'Parse/' + _CoreManager.default.get('APPLICATION_ID') + '/' + path;\n  },\n\n  _clear() {\n    const controller = _CoreManager.default.getStorageController();\n\n    if (controller.hasOwnProperty('clear')) {\n      controller.clear();\n    }\n  }\n\n};\nmodule.exports = Storage;\n\n_CoreManager.default.setStorageController(require('./StorageController.default'));","map":{"version":3,"sources":["/Users/szd/Dev/ycomms-smoketest-landing-page/node_modules/parse/lib/node/Storage.js"],"names":["_CoreManager","_interopRequireDefault","require","obj","__esModule","default","Storage","async","controller","getStorageController","getItem","path","Error","getItemAsync","Promise","resolve","setItem","value","setItemAsync","removeItem","removeItemAsync","getAllKeys","getAllKeysAsync","generatePath","get","substr","_clear","hasOwnProperty","clear","module","exports","setStorageController"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _CoreManager = _interopRequireDefault(require(\"./CoreManager\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * Copyright (c) 2015-present, Parse, LLC.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @flow\n */\n\n\nconst Storage = {\n  async()\n  /*: boolean*/\n  {\n    const controller = _CoreManager.default.getStorageController();\n\n    return !!controller.async;\n  },\n\n  getItem(path\n  /*: string*/\n  )\n  /*: ?string*/\n  {\n    const controller = _CoreManager.default.getStorageController();\n\n    if (controller.async === 1) {\n      throw new Error('Synchronous storage is not supported by the current storage controller');\n    }\n\n    return controller.getItem(path);\n  },\n\n  getItemAsync(path\n  /*: string*/\n  )\n  /*: Promise<string>*/\n  {\n    const controller = _CoreManager.default.getStorageController();\n\n    if (controller.async === 1) {\n      return controller.getItemAsync(path);\n    }\n\n    return Promise.resolve(controller.getItem(path));\n  },\n\n  setItem(path\n  /*: string*/\n  , value\n  /*: string*/\n  )\n  /*: void*/\n  {\n    const controller = _CoreManager.default.getStorageController();\n\n    if (controller.async === 1) {\n      throw new Error('Synchronous storage is not supported by the current storage controller');\n    }\n\n    return controller.setItem(path, value);\n  },\n\n  setItemAsync(path\n  /*: string*/\n  , value\n  /*: string*/\n  )\n  /*: Promise<void>*/\n  {\n    const controller = _CoreManager.default.getStorageController();\n\n    if (controller.async === 1) {\n      return controller.setItemAsync(path, value);\n    }\n\n    return Promise.resolve(controller.setItem(path, value));\n  },\n\n  removeItem(path\n  /*: string*/\n  )\n  /*: void*/\n  {\n    const controller = _CoreManager.default.getStorageController();\n\n    if (controller.async === 1) {\n      throw new Error('Synchronous storage is not supported by the current storage controller');\n    }\n\n    return controller.removeItem(path);\n  },\n\n  removeItemAsync(path\n  /*: string*/\n  )\n  /*: Promise<void>*/\n  {\n    const controller = _CoreManager.default.getStorageController();\n\n    if (controller.async === 1) {\n      return controller.removeItemAsync(path);\n    }\n\n    return Promise.resolve(controller.removeItem(path));\n  },\n\n  getAllKeys()\n  /*: Array<string>*/\n  {\n    const controller = _CoreManager.default.getStorageController();\n\n    if (controller.async === 1) {\n      throw new Error('Synchronous storage is not supported by the current storage controller');\n    }\n\n    return controller.getAllKeys();\n  },\n\n  getAllKeysAsync()\n  /*: Promise<Array<string>>*/\n  {\n    const controller = _CoreManager.default.getStorageController();\n\n    if (controller.async === 1) {\n      return controller.getAllKeysAsync();\n    }\n\n    return Promise.resolve(controller.getAllKeys());\n  },\n\n  generatePath(path\n  /*: string*/\n  )\n  /*: string*/\n  {\n    if (!_CoreManager.default.get('APPLICATION_ID')) {\n      throw new Error('You need to call Parse.initialize before using Parse.');\n    }\n\n    if (typeof path !== 'string') {\n      throw new Error('Tried to get a Storage path that was not a String.');\n    }\n\n    if (path[0] === '/') {\n      path = path.substr(1);\n    }\n\n    return 'Parse/' + _CoreManager.default.get('APPLICATION_ID') + '/' + path;\n  },\n\n  _clear() {\n    const controller = _CoreManager.default.getStorageController();\n\n    if (controller.hasOwnProperty('clear')) {\n      controller.clear();\n    }\n  }\n\n};\nmodule.exports = Storage;\n\n_CoreManager.default.setStorageController(require('./StorageController.default'));"]},"metadata":{},"sourceType":"script"}