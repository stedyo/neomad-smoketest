{"ast":null,"code":"\"use strict\";\n\nvar _CoreManager = _interopRequireDefault(require(\"./CoreManager\"));\n\nvar _ParseQuery = _interopRequireDefault(require(\"./ParseQuery\"));\n\nvar _LocalDatastoreUtils = require(\"./LocalDatastoreUtils\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * Copyright (c) 2015-present, Parse, LLC.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @flow\n */\n\n/**\n * Provides a local datastore which can be used to store and retrieve <code>Parse.Object</code>. <br />\n * To enable this functionality, call <code>Parse.enableLocalDatastore()</code>.\n *\n * Pin object to add to local datastore\n *\n * <pre>await object.pin();</pre>\n * <pre>await object.pinWithName('pinName');</pre>\n *\n * Query pinned objects\n *\n * <pre>query.fromLocalDatastore();</pre>\n * <pre>query.fromPin();</pre>\n * <pre>query.fromPinWithName();</pre>\n *\n * <pre>const localObjects = await query.find();</pre>\n *\n * @class Parse.LocalDatastore\n * @static\n */\n\n\nconst LocalDatastore = {\n  isEnabled: false,\n  isSyncing: false,\n\n  fromPinWithName(name\n  /*: string*/\n  )\n  /*: Promise<Array<Object>>*/\n  {\n    const controller = _CoreManager.default.getLocalDatastoreController();\n\n    return controller.fromPinWithName(name);\n  },\n\n  pinWithName(name\n  /*: string*/\n  , value\n  /*: any*/\n  )\n  /*: Promise<void>*/\n  {\n    const controller = _CoreManager.default.getLocalDatastoreController();\n\n    return controller.pinWithName(name, value);\n  },\n\n  unPinWithName(name\n  /*: string*/\n  )\n  /*: Promise<void>*/\n  {\n    const controller = _CoreManager.default.getLocalDatastoreController();\n\n    return controller.unPinWithName(name);\n  },\n\n  _getAllContents()\n  /*: Promise<Object>*/\n  {\n    const controller = _CoreManager.default.getLocalDatastoreController();\n\n    return controller.getAllContents();\n  },\n\n  // Use for testing\n  _getRawStorage()\n  /*: Promise<Object>*/\n  {\n    const controller = _CoreManager.default.getLocalDatastoreController();\n\n    return controller.getRawStorage();\n  },\n\n  _clear()\n  /*: Promise<void>*/\n  {\n    const controller = _CoreManager.default.getLocalDatastoreController();\n\n    return controller.clear();\n  },\n\n  // Pin the object and children recursively\n  // Saves the object and children key to Pin Name\n  async _handlePinAllWithName(name\n  /*: string*/\n  , objects\n  /*: Array<ParseObject>*/\n  )\n  /*: Promise<void>*/\n  {\n    const pinName = this.getPinName(name);\n    const toPinPromises = [];\n    const objectKeys = [];\n\n    for (const parent of objects) {\n      const children = this._getChildren(parent);\n\n      const parentKey = this.getKeyForObject(parent);\n\n      const json = parent._toFullJSON(undefined, true);\n\n      if (parent._localId) {\n        json._localId = parent._localId;\n      }\n\n      children[parentKey] = json;\n\n      for (const objectKey in children) {\n        objectKeys.push(objectKey);\n        toPinPromises.push(this.pinWithName(objectKey, [children[objectKey]]));\n      }\n    }\n\n    const fromPinPromise = this.fromPinWithName(pinName);\n    const [pinned] = await Promise.all([fromPinPromise, toPinPromises]);\n    const toPin = [...new Set([...(pinned || []), ...objectKeys])];\n    return this.pinWithName(pinName, toPin);\n  },\n\n  // Removes object and children keys from pin name\n  // Keeps the object and children pinned\n  async _handleUnPinAllWithName(name\n  /*: string*/\n  , objects\n  /*: Array<ParseObject>*/\n  ) {\n    const localDatastore = await this._getAllContents();\n    const pinName = this.getPinName(name);\n    const promises = [];\n    let objectKeys = [];\n\n    for (const parent of objects) {\n      const children = this._getChildren(parent);\n\n      const parentKey = this.getKeyForObject(parent);\n      objectKeys.push(parentKey, ...Object.keys(children));\n    }\n\n    objectKeys = [...new Set(objectKeys)];\n    let pinned = localDatastore[pinName] || [];\n    pinned = pinned.filter(item => !objectKeys.includes(item));\n\n    if (pinned.length == 0) {\n      promises.push(this.unPinWithName(pinName));\n      delete localDatastore[pinName];\n    } else {\n      promises.push(this.pinWithName(pinName, pinned));\n      localDatastore[pinName] = pinned;\n    }\n\n    for (const objectKey of objectKeys) {\n      let hasReference = false;\n\n      for (const key in localDatastore) {\n        if (key === _LocalDatastoreUtils.DEFAULT_PIN || key.startsWith(_LocalDatastoreUtils.PIN_PREFIX)) {\n          const pinnedObjects = localDatastore[key] || [];\n\n          if (pinnedObjects.includes(objectKey)) {\n            hasReference = true;\n            break;\n          }\n        }\n      }\n\n      if (!hasReference) {\n        promises.push(this.unPinWithName(objectKey));\n      }\n    }\n\n    return Promise.all(promises);\n  },\n\n  // Retrieve all pointer fields from object recursively\n  _getChildren(object\n  /*: ParseObject*/\n  ) {\n    const encountered = {};\n\n    const json = object._toFullJSON(undefined, true);\n\n    for (const key in json) {\n      if (json[key] && json[key].__type && json[key].__type === 'Object') {\n        this._traverse(json[key], encountered);\n      }\n    }\n\n    return encountered;\n  },\n\n  _traverse(object\n  /*: any*/\n  , encountered\n  /*: any*/\n  ) {\n    if (!object.objectId) {\n      return;\n    } else {\n      const objectKey = this.getKeyForObject(object);\n\n      if (encountered[objectKey]) {\n        return;\n      }\n\n      encountered[objectKey] = object;\n    }\n\n    for (const key in object) {\n      let json = object[key];\n\n      if (!object[key]) {\n        json = object;\n      }\n\n      if (json.__type && json.__type === 'Object') {\n        this._traverse(json, encountered);\n      }\n    }\n  },\n\n  // Transform keys in pin name to objects\n  async _serializeObjectsFromPinName(name\n  /*: string*/\n  ) {\n    const localDatastore = await this._getAllContents();\n    const allObjects = [];\n\n    for (const key in localDatastore) {\n      if (key.startsWith(_LocalDatastoreUtils.OBJECT_PREFIX)) {\n        allObjects.push(localDatastore[key][0]);\n      }\n    }\n\n    if (!name) {\n      return allObjects;\n    }\n\n    const pinName = this.getPinName(name);\n    const pinned = localDatastore[pinName];\n\n    if (!Array.isArray(pinned)) {\n      return [];\n    }\n\n    const promises = pinned.map(objectKey => this.fromPinWithName(objectKey));\n    let objects = await Promise.all(promises);\n    objects = [].concat(...objects);\n    return objects.filter(object => object != null);\n  },\n\n  // Replaces object pointers with pinned pointers\n  // The object pointers may contain old data\n  // Uses Breadth First Search Algorithm\n  async _serializeObject(objectKey\n  /*: string*/\n  , localDatastore\n  /*: any*/\n  ) {\n    let LDS = localDatastore;\n\n    if (!LDS) {\n      LDS = await this._getAllContents();\n    }\n\n    if (!LDS[objectKey] || LDS[objectKey].length === 0) {\n      return null;\n    }\n\n    const root = LDS[objectKey][0];\n    const queue = [];\n    const meta = {};\n    let uniqueId = 0;\n    meta[uniqueId] = root;\n    queue.push(uniqueId);\n\n    while (queue.length !== 0) {\n      const nodeId = queue.shift();\n      const subTreeRoot = meta[nodeId];\n\n      for (const field in subTreeRoot) {\n        const value = subTreeRoot[field];\n\n        if (value.__type && value.__type === 'Object') {\n          const key = this.getKeyForObject(value);\n\n          if (LDS[key] && LDS[key].length > 0) {\n            const pointer = LDS[key][0];\n            uniqueId++;\n            meta[uniqueId] = pointer;\n            subTreeRoot[field] = pointer;\n            queue.push(uniqueId);\n          }\n        }\n      }\n    }\n\n    return root;\n  },\n\n  // Called when an object is save / fetched\n  // Update object pin value\n  async _updateObjectIfPinned(object\n  /*: ParseObject*/\n  )\n  /*: Promise<void>*/\n  {\n    if (!this.isEnabled) {\n      return;\n    }\n\n    const objectKey = this.getKeyForObject(object);\n    const pinned = await this.fromPinWithName(objectKey);\n\n    if (!pinned || pinned.length === 0) {\n      return;\n    }\n\n    return this.pinWithName(objectKey, [object._toFullJSON()]);\n  },\n\n  // Called when object is destroyed\n  // Unpin object and remove all references from pin names\n  // TODO: Destroy children?\n  async _destroyObjectIfPinned(object\n  /*: ParseObject*/\n  ) {\n    if (!this.isEnabled) {\n      return;\n    }\n\n    const localDatastore = await this._getAllContents();\n    const objectKey = this.getKeyForObject(object);\n    const pin = localDatastore[objectKey];\n\n    if (!pin) {\n      return;\n    }\n\n    const promises = [this.unPinWithName(objectKey)];\n    delete localDatastore[objectKey];\n\n    for (const key in localDatastore) {\n      if (key === _LocalDatastoreUtils.DEFAULT_PIN || key.startsWith(_LocalDatastoreUtils.PIN_PREFIX)) {\n        let pinned = localDatastore[key] || [];\n\n        if (pinned.includes(objectKey)) {\n          pinned = pinned.filter(item => item !== objectKey);\n\n          if (pinned.length == 0) {\n            promises.push(this.unPinWithName(key));\n            delete localDatastore[key];\n          } else {\n            promises.push(this.pinWithName(key, pinned));\n            localDatastore[key] = pinned;\n          }\n        }\n      }\n    }\n\n    return Promise.all(promises);\n  },\n\n  // Update pin and references of the unsaved object\n  async _updateLocalIdForObject(localId\n  /*: string*/\n  , object\n  /*: ParseObject*/\n  ) {\n    if (!this.isEnabled) {\n      return;\n    }\n\n    const localKey = `${_LocalDatastoreUtils.OBJECT_PREFIX}${object.className}_${localId}`;\n    const objectKey = this.getKeyForObject(object);\n    const unsaved = await this.fromPinWithName(localKey);\n\n    if (!unsaved || unsaved.length === 0) {\n      return;\n    }\n\n    const promises = [this.unPinWithName(localKey), this.pinWithName(objectKey, unsaved)];\n    const localDatastore = await this._getAllContents();\n\n    for (const key in localDatastore) {\n      if (key === _LocalDatastoreUtils.DEFAULT_PIN || key.startsWith(_LocalDatastoreUtils.PIN_PREFIX)) {\n        let pinned = localDatastore[key] || [];\n\n        if (pinned.includes(localKey)) {\n          pinned = pinned.filter(item => item !== localKey);\n          pinned.push(objectKey);\n          promises.push(this.pinWithName(key, pinned));\n          localDatastore[key] = pinned;\n        }\n      }\n    }\n\n    return Promise.all(promises);\n  },\n\n  /**\n   * Updates Local Datastore from Server\n   *\n   * <pre>\n   * await Parse.LocalDatastore.updateFromServer();\n   * </pre>\n   *\n   * @function updateFromServer\n   * @name Parse.LocalDatastore.updateFromServer\n   * @static\n   */\n  async updateFromServer() {\n    if (!this.checkIfEnabled() || this.isSyncing) {\n      return;\n    }\n\n    const localDatastore = await this._getAllContents();\n    const keys = [];\n\n    for (const key in localDatastore) {\n      if (key.startsWith(_LocalDatastoreUtils.OBJECT_PREFIX)) {\n        keys.push(key);\n      }\n    }\n\n    if (keys.length === 0) {\n      return;\n    }\n\n    this.isSyncing = true;\n    const pointersHash = {};\n\n    for (const key of keys) {\n      // Ignore the OBJECT_PREFIX\n      let [,, className, objectId] = key.split('_'); // User key is split into [ 'Parse', 'LDS', '', 'User', 'objectId' ]\n\n      if (key.split('_').length === 5 && key.split('_')[3] === 'User') {\n        className = '_User';\n        objectId = key.split('_')[4];\n      }\n\n      if (objectId.startsWith('local')) {\n        continue;\n      }\n\n      if (!(className in pointersHash)) {\n        pointersHash[className] = new Set();\n      }\n\n      pointersHash[className].add(objectId);\n    }\n\n    const queryPromises = Object.keys(pointersHash).map(className => {\n      const objectIds = Array.from(pointersHash[className]);\n      const query = new _ParseQuery.default(className);\n      query.limit(objectIds.length);\n\n      if (objectIds.length === 1) {\n        query.equalTo('objectId', objectIds[0]);\n      } else {\n        query.containedIn('objectId', objectIds);\n      }\n\n      return query.find();\n    });\n\n    try {\n      const responses = await Promise.all(queryPromises);\n      const objects = [].concat.apply([], responses);\n      const pinPromises = objects.map(object => {\n        const objectKey = this.getKeyForObject(object);\n        return this.pinWithName(objectKey, object._toFullJSON());\n      });\n      await Promise.all(pinPromises);\n      this.isSyncing = false;\n    } catch (error) {\n      console.error('Error syncing LocalDatastore: ', error);\n      this.isSyncing = false;\n    }\n  },\n\n  getKeyForObject(object\n  /*: any*/\n  ) {\n    const objectId = object.objectId || object._getId();\n\n    return `${_LocalDatastoreUtils.OBJECT_PREFIX}${object.className}_${objectId}`;\n  },\n\n  getPinName(pinName\n  /*: ?string*/\n  ) {\n    if (!pinName || pinName === _LocalDatastoreUtils.DEFAULT_PIN) {\n      return _LocalDatastoreUtils.DEFAULT_PIN;\n    }\n\n    return _LocalDatastoreUtils.PIN_PREFIX + pinName;\n  },\n\n  checkIfEnabled() {\n    if (!this.isEnabled) {\n      console.error('Parse.enableLocalDatastore() must be called first');\n    }\n\n    return this.isEnabled;\n  }\n\n};\nmodule.exports = LocalDatastore;\n\n_CoreManager.default.setLocalDatastoreController(require('./LocalDatastoreController'));\n\n_CoreManager.default.setLocalDatastore(LocalDatastore);","map":{"version":3,"sources":["/Users/szd/Dev/ycomms-smoketest-landing-page/node_modules/parse/lib/node/LocalDatastore.js"],"names":["_CoreManager","_interopRequireDefault","require","_ParseQuery","_LocalDatastoreUtils","obj","__esModule","default","LocalDatastore","isEnabled","isSyncing","fromPinWithName","name","controller","getLocalDatastoreController","pinWithName","value","unPinWithName","_getAllContents","getAllContents","_getRawStorage","getRawStorage","_clear","clear","_handlePinAllWithName","objects","pinName","getPinName","toPinPromises","objectKeys","parent","children","_getChildren","parentKey","getKeyForObject","json","_toFullJSON","undefined","_localId","objectKey","push","fromPinPromise","pinned","Promise","all","toPin","Set","_handleUnPinAllWithName","localDatastore","promises","Object","keys","filter","item","includes","length","hasReference","key","DEFAULT_PIN","startsWith","PIN_PREFIX","pinnedObjects","object","encountered","__type","_traverse","objectId","_serializeObjectsFromPinName","allObjects","OBJECT_PREFIX","Array","isArray","map","concat","_serializeObject","LDS","root","queue","meta","uniqueId","nodeId","shift","subTreeRoot","field","pointer","_updateObjectIfPinned","_destroyObjectIfPinned","pin","_updateLocalIdForObject","localId","localKey","className","unsaved","updateFromServer","checkIfEnabled","pointersHash","split","add","queryPromises","objectIds","from","query","limit","equalTo","containedIn","find","responses","apply","pinPromises","error","console","_getId","module","exports","setLocalDatastoreController","setLocalDatastore"],"mappings":"AAAA;;AAEA,IAAIA,YAAY,GAAGC,sBAAsB,CAACC,OAAO,CAAC,eAAD,CAAR,CAAzC;;AAEA,IAAIC,WAAW,GAAGF,sBAAsB,CAACC,OAAO,CAAC,cAAD,CAAR,CAAxC;;AAEA,IAAIE,oBAAoB,GAAGF,OAAO,CAAC,uBAAD,CAAlC;;AAEA,SAASD,sBAAT,CAAgCI,GAAhC,EAAqC;AACnC,SAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;AACnCE,IAAAA,OAAO,EAAEF;AAD0B,GAArC;AAGD;AACD;;;;;;;;;;;AAWA;;;;;;;;;;;;;;;;;;;;;;AAsBA,MAAMG,cAAc,GAAG;AACrBC,EAAAA,SAAS,EAAE,KADU;AAErBC,EAAAA,SAAS,EAAE,KAFU;;AAIrBC,EAAAA,eAAe,CAACC;AAChB;AADe;AAGf;AACA;AACE,UAAMC,UAAU,GAAGb,YAAY,CAACO,OAAb,CAAqBO,2BAArB,EAAnB;;AAEA,WAAOD,UAAU,CAACF,eAAX,CAA2BC,IAA3B,CAAP;AACD,GAZoB;;AAcrBG,EAAAA,WAAW,CAACH;AACZ;AADW,IAETI;AACF;AAHW;AAKX;AACA;AACE,UAAMH,UAAU,GAAGb,YAAY,CAACO,OAAb,CAAqBO,2BAArB,EAAnB;;AAEA,WAAOD,UAAU,CAACE,WAAX,CAAuBH,IAAvB,EAA6BI,KAA7B,CAAP;AACD,GAxBoB;;AA0BrBC,EAAAA,aAAa,CAACL;AACd;AADa;AAGb;AACA;AACE,UAAMC,UAAU,GAAGb,YAAY,CAACO,OAAb,CAAqBO,2BAArB,EAAnB;;AAEA,WAAOD,UAAU,CAACI,aAAX,CAAyBL,IAAzB,CAAP;AACD,GAlCoB;;AAoCrBM,EAAAA,eAAe;AACf;AACA;AACE,UAAML,UAAU,GAAGb,YAAY,CAACO,OAAb,CAAqBO,2BAArB,EAAnB;;AAEA,WAAOD,UAAU,CAACM,cAAX,EAAP;AACD,GA1CoB;;AA4CrB;AACAC,EAAAA,cAAc;AACd;AACA;AACE,UAAMP,UAAU,GAAGb,YAAY,CAACO,OAAb,CAAqBO,2BAArB,EAAnB;;AAEA,WAAOD,UAAU,CAACQ,aAAX,EAAP;AACD,GAnDoB;;AAqDrBC,EAAAA,MAAM;AACN;AACA;AACE,UAAMT,UAAU,GAAGb,YAAY,CAACO,OAAb,CAAqBO,2BAArB,EAAnB;;AAEA,WAAOD,UAAU,CAACU,KAAX,EAAP;AACD,GA3DoB;;AA6DrB;AACA;AACA,QAAMC,qBAAN,CAA4BZ;AAC5B;AADA,IAEEa;AACF;AAHA;AAKA;AACA;AACE,UAAMC,OAAO,GAAG,KAAKC,UAAL,CAAgBf,IAAhB,CAAhB;AACA,UAAMgB,aAAa,GAAG,EAAtB;AACA,UAAMC,UAAU,GAAG,EAAnB;;AAEA,SAAK,MAAMC,MAAX,IAAqBL,OAArB,EAA8B;AAC5B,YAAMM,QAAQ,GAAG,KAAKC,YAAL,CAAkBF,MAAlB,CAAjB;;AAEA,YAAMG,SAAS,GAAG,KAAKC,eAAL,CAAqBJ,MAArB,CAAlB;;AAEA,YAAMK,IAAI,GAAGL,MAAM,CAACM,WAAP,CAAmBC,SAAnB,EAA8B,IAA9B,CAAb;;AAEA,UAAIP,MAAM,CAACQ,QAAX,EAAqB;AACnBH,QAAAA,IAAI,CAACG,QAAL,GAAgBR,MAAM,CAACQ,QAAvB;AACD;;AAEDP,MAAAA,QAAQ,CAACE,SAAD,CAAR,GAAsBE,IAAtB;;AAEA,WAAK,MAAMI,SAAX,IAAwBR,QAAxB,EAAkC;AAChCF,QAAAA,UAAU,CAACW,IAAX,CAAgBD,SAAhB;AACAX,QAAAA,aAAa,CAACY,IAAd,CAAmB,KAAKzB,WAAL,CAAiBwB,SAAjB,EAA4B,CAACR,QAAQ,CAACQ,SAAD,CAAT,CAA5B,CAAnB;AACD;AACF;;AAED,UAAME,cAAc,GAAG,KAAK9B,eAAL,CAAqBe,OAArB,CAAvB;AACA,UAAM,CAACgB,MAAD,IAAW,MAAMC,OAAO,CAACC,GAAR,CAAY,CAACH,cAAD,EAAiBb,aAAjB,CAAZ,CAAvB;AACA,UAAMiB,KAAK,GAAG,CAAC,GAAG,IAAIC,GAAJ,CAAQ,CAAC,IAAIJ,MAAM,IAAI,EAAd,CAAD,EAAoB,GAAGb,UAAvB,CAAR,CAAJ,CAAd;AACA,WAAO,KAAKd,WAAL,CAAiBW,OAAjB,EAA0BmB,KAA1B,CAAP;AACD,GAjGoB;;AAmGrB;AACA;AACA,QAAME,uBAAN,CAA8BnC;AAC9B;AADA,IAEEa;AACF;AAHA,IAIE;AACA,UAAMuB,cAAc,GAAG,MAAM,KAAK9B,eAAL,EAA7B;AACA,UAAMQ,OAAO,GAAG,KAAKC,UAAL,CAAgBf,IAAhB,CAAhB;AACA,UAAMqC,QAAQ,GAAG,EAAjB;AACA,QAAIpB,UAAU,GAAG,EAAjB;;AAEA,SAAK,MAAMC,MAAX,IAAqBL,OAArB,EAA8B;AAC5B,YAAMM,QAAQ,GAAG,KAAKC,YAAL,CAAkBF,MAAlB,CAAjB;;AAEA,YAAMG,SAAS,GAAG,KAAKC,eAAL,CAAqBJ,MAArB,CAAlB;AACAD,MAAAA,UAAU,CAACW,IAAX,CAAgBP,SAAhB,EAA2B,GAAGiB,MAAM,CAACC,IAAP,CAAYpB,QAAZ,CAA9B;AACD;;AAEDF,IAAAA,UAAU,GAAG,CAAC,GAAG,IAAIiB,GAAJ,CAAQjB,UAAR,CAAJ,CAAb;AACA,QAAIa,MAAM,GAAGM,cAAc,CAACtB,OAAD,CAAd,IAA2B,EAAxC;AACAgB,IAAAA,MAAM,GAAGA,MAAM,CAACU,MAAP,CAAcC,IAAI,IAAI,CAACxB,UAAU,CAACyB,QAAX,CAAoBD,IAApB,CAAvB,CAAT;;AAEA,QAAIX,MAAM,CAACa,MAAP,IAAiB,CAArB,EAAwB;AACtBN,MAAAA,QAAQ,CAACT,IAAT,CAAc,KAAKvB,aAAL,CAAmBS,OAAnB,CAAd;AACA,aAAOsB,cAAc,CAACtB,OAAD,CAArB;AACD,KAHD,MAGO;AACLuB,MAAAA,QAAQ,CAACT,IAAT,CAAc,KAAKzB,WAAL,CAAiBW,OAAjB,EAA0BgB,MAA1B,CAAd;AACAM,MAAAA,cAAc,CAACtB,OAAD,CAAd,GAA0BgB,MAA1B;AACD;;AAED,SAAK,MAAMH,SAAX,IAAwBV,UAAxB,EAAoC;AAClC,UAAI2B,YAAY,GAAG,KAAnB;;AAEA,WAAK,MAAMC,GAAX,IAAkBT,cAAlB,EAAkC;AAChC,YAAIS,GAAG,KAAKrD,oBAAoB,CAACsD,WAA7B,IAA4CD,GAAG,CAACE,UAAJ,CAAevD,oBAAoB,CAACwD,UAApC,CAAhD,EAAiG;AAC/F,gBAAMC,aAAa,GAAGb,cAAc,CAACS,GAAD,CAAd,IAAuB,EAA7C;;AAEA,cAAII,aAAa,CAACP,QAAd,CAAuBf,SAAvB,CAAJ,EAAuC;AACrCiB,YAAAA,YAAY,GAAG,IAAf;AACA;AACD;AACF;AACF;;AAED,UAAI,CAACA,YAAL,EAAmB;AACjBP,QAAAA,QAAQ,CAACT,IAAT,CAAc,KAAKvB,aAAL,CAAmBsB,SAAnB,CAAd;AACD;AACF;;AAED,WAAOI,OAAO,CAACC,GAAR,CAAYK,QAAZ,CAAP;AACD,GAtJoB;;AAwJrB;AACAjB,EAAAA,YAAY,CAAC8B;AACb;AADY,IAEV;AACA,UAAMC,WAAW,GAAG,EAApB;;AAEA,UAAM5B,IAAI,GAAG2B,MAAM,CAAC1B,WAAP,CAAmBC,SAAnB,EAA8B,IAA9B,CAAb;;AAEA,SAAK,MAAMoB,GAAX,IAAkBtB,IAAlB,EAAwB;AACtB,UAAIA,IAAI,CAACsB,GAAD,CAAJ,IAAatB,IAAI,CAACsB,GAAD,CAAJ,CAAUO,MAAvB,IAAiC7B,IAAI,CAACsB,GAAD,CAAJ,CAAUO,MAAV,KAAqB,QAA1D,EAAoE;AAClE,aAAKC,SAAL,CAAe9B,IAAI,CAACsB,GAAD,CAAnB,EAA0BM,WAA1B;AACD;AACF;;AAED,WAAOA,WAAP;AACD,GAvKoB;;AAyKrBE,EAAAA,SAAS,CAACH;AACV;AADS,IAEPC;AACF;AAHS,IAIP;AACA,QAAI,CAACD,MAAM,CAACI,QAAZ,EAAsB;AACpB;AACD,KAFD,MAEO;AACL,YAAM3B,SAAS,GAAG,KAAKL,eAAL,CAAqB4B,MAArB,CAAlB;;AAEA,UAAIC,WAAW,CAACxB,SAAD,CAAf,EAA4B;AAC1B;AACD;;AAEDwB,MAAAA,WAAW,CAACxB,SAAD,CAAX,GAAyBuB,MAAzB;AACD;;AAED,SAAK,MAAML,GAAX,IAAkBK,MAAlB,EAA0B;AACxB,UAAI3B,IAAI,GAAG2B,MAAM,CAACL,GAAD,CAAjB;;AAEA,UAAI,CAACK,MAAM,CAACL,GAAD,CAAX,EAAkB;AAChBtB,QAAAA,IAAI,GAAG2B,MAAP;AACD;;AAED,UAAI3B,IAAI,CAAC6B,MAAL,IAAe7B,IAAI,CAAC6B,MAAL,KAAgB,QAAnC,EAA6C;AAC3C,aAAKC,SAAL,CAAe9B,IAAf,EAAqB4B,WAArB;AACD;AACF;AACF,GArMoB;;AAuMrB;AACA,QAAMI,4BAAN,CAAmCvD;AACnC;AADA,IAEE;AACA,UAAMoC,cAAc,GAAG,MAAM,KAAK9B,eAAL,EAA7B;AACA,UAAMkD,UAAU,GAAG,EAAnB;;AAEA,SAAK,MAAMX,GAAX,IAAkBT,cAAlB,EAAkC;AAChC,UAAIS,GAAG,CAACE,UAAJ,CAAevD,oBAAoB,CAACiE,aAApC,CAAJ,EAAwD;AACtDD,QAAAA,UAAU,CAAC5B,IAAX,CAAgBQ,cAAc,CAACS,GAAD,CAAd,CAAoB,CAApB,CAAhB;AACD;AACF;;AAED,QAAI,CAAC7C,IAAL,EAAW;AACT,aAAOwD,UAAP;AACD;;AAED,UAAM1C,OAAO,GAAG,KAAKC,UAAL,CAAgBf,IAAhB,CAAhB;AACA,UAAM8B,MAAM,GAAGM,cAAc,CAACtB,OAAD,CAA7B;;AAEA,QAAI,CAAC4C,KAAK,CAACC,OAAN,CAAc7B,MAAd,CAAL,EAA4B;AAC1B,aAAO,EAAP;AACD;;AAED,UAAMO,QAAQ,GAAGP,MAAM,CAAC8B,GAAP,CAAWjC,SAAS,IAAI,KAAK5B,eAAL,CAAqB4B,SAArB,CAAxB,CAAjB;AACA,QAAId,OAAO,GAAG,MAAMkB,OAAO,CAACC,GAAR,CAAYK,QAAZ,CAApB;AACAxB,IAAAA,OAAO,GAAG,GAAGgD,MAAH,CAAU,GAAGhD,OAAb,CAAV;AACA,WAAOA,OAAO,CAAC2B,MAAR,CAAeU,MAAM,IAAIA,MAAM,IAAI,IAAnC,CAAP;AACD,GAnOoB;;AAqOrB;AACA;AACA;AACA,QAAMY,gBAAN,CAAuBnC;AACvB;AADA,IAEES;AACF;AAHA,IAIE;AACA,QAAI2B,GAAG,GAAG3B,cAAV;;AAEA,QAAI,CAAC2B,GAAL,EAAU;AACRA,MAAAA,GAAG,GAAG,MAAM,KAAKzD,eAAL,EAAZ;AACD;;AAED,QAAI,CAACyD,GAAG,CAACpC,SAAD,CAAJ,IAAmBoC,GAAG,CAACpC,SAAD,CAAH,CAAegB,MAAf,KAA0B,CAAjD,EAAoD;AAClD,aAAO,IAAP;AACD;;AAED,UAAMqB,IAAI,GAAGD,GAAG,CAACpC,SAAD,CAAH,CAAe,CAAf,CAAb;AACA,UAAMsC,KAAK,GAAG,EAAd;AACA,UAAMC,IAAI,GAAG,EAAb;AACA,QAAIC,QAAQ,GAAG,CAAf;AACAD,IAAAA,IAAI,CAACC,QAAD,CAAJ,GAAiBH,IAAjB;AACAC,IAAAA,KAAK,CAACrC,IAAN,CAAWuC,QAAX;;AAEA,WAAOF,KAAK,CAACtB,MAAN,KAAiB,CAAxB,EAA2B;AACzB,YAAMyB,MAAM,GAAGH,KAAK,CAACI,KAAN,EAAf;AACA,YAAMC,WAAW,GAAGJ,IAAI,CAACE,MAAD,CAAxB;;AAEA,WAAK,MAAMG,KAAX,IAAoBD,WAApB,EAAiC;AAC/B,cAAMlE,KAAK,GAAGkE,WAAW,CAACC,KAAD,CAAzB;;AAEA,YAAInE,KAAK,CAACgD,MAAN,IAAgBhD,KAAK,CAACgD,MAAN,KAAiB,QAArC,EAA+C;AAC7C,gBAAMP,GAAG,GAAG,KAAKvB,eAAL,CAAqBlB,KAArB,CAAZ;;AAEA,cAAI2D,GAAG,CAAClB,GAAD,CAAH,IAAYkB,GAAG,CAAClB,GAAD,CAAH,CAASF,MAAT,GAAkB,CAAlC,EAAqC;AACnC,kBAAM6B,OAAO,GAAGT,GAAG,CAAClB,GAAD,CAAH,CAAS,CAAT,CAAhB;AACAsB,YAAAA,QAAQ;AACRD,YAAAA,IAAI,CAACC,QAAD,CAAJ,GAAiBK,OAAjB;AACAF,YAAAA,WAAW,CAACC,KAAD,CAAX,GAAqBC,OAArB;AACAP,YAAAA,KAAK,CAACrC,IAAN,CAAWuC,QAAX;AACD;AACF;AACF;AACF;;AAED,WAAOH,IAAP;AACD,GApRoB;;AAsRrB;AACA;AACA,QAAMS,qBAAN,CAA4BvB;AAC5B;AADA;AAGA;AACA;AACE,QAAI,CAAC,KAAKrD,SAAV,EAAqB;AACnB;AACD;;AAED,UAAM8B,SAAS,GAAG,KAAKL,eAAL,CAAqB4B,MAArB,CAAlB;AACA,UAAMpB,MAAM,GAAG,MAAM,KAAK/B,eAAL,CAAqB4B,SAArB,CAArB;;AAEA,QAAI,CAACG,MAAD,IAAWA,MAAM,CAACa,MAAP,KAAkB,CAAjC,EAAoC;AAClC;AACD;;AAED,WAAO,KAAKxC,WAAL,CAAiBwB,SAAjB,EAA4B,CAACuB,MAAM,CAAC1B,WAAP,EAAD,CAA5B,CAAP;AACD,GAzSoB;;AA2SrB;AACA;AACA;AACA,QAAMkD,sBAAN,CAA6BxB;AAC7B;AADA,IAEE;AACA,QAAI,CAAC,KAAKrD,SAAV,EAAqB;AACnB;AACD;;AAED,UAAMuC,cAAc,GAAG,MAAM,KAAK9B,eAAL,EAA7B;AACA,UAAMqB,SAAS,GAAG,KAAKL,eAAL,CAAqB4B,MAArB,CAAlB;AACA,UAAMyB,GAAG,GAAGvC,cAAc,CAACT,SAAD,CAA1B;;AAEA,QAAI,CAACgD,GAAL,EAAU;AACR;AACD;;AAED,UAAMtC,QAAQ,GAAG,CAAC,KAAKhC,aAAL,CAAmBsB,SAAnB,CAAD,CAAjB;AACA,WAAOS,cAAc,CAACT,SAAD,CAArB;;AAEA,SAAK,MAAMkB,GAAX,IAAkBT,cAAlB,EAAkC;AAChC,UAAIS,GAAG,KAAKrD,oBAAoB,CAACsD,WAA7B,IAA4CD,GAAG,CAACE,UAAJ,CAAevD,oBAAoB,CAACwD,UAApC,CAAhD,EAAiG;AAC/F,YAAIlB,MAAM,GAAGM,cAAc,CAACS,GAAD,CAAd,IAAuB,EAApC;;AAEA,YAAIf,MAAM,CAACY,QAAP,CAAgBf,SAAhB,CAAJ,EAAgC;AAC9BG,UAAAA,MAAM,GAAGA,MAAM,CAACU,MAAP,CAAcC,IAAI,IAAIA,IAAI,KAAKd,SAA/B,CAAT;;AAEA,cAAIG,MAAM,CAACa,MAAP,IAAiB,CAArB,EAAwB;AACtBN,YAAAA,QAAQ,CAACT,IAAT,CAAc,KAAKvB,aAAL,CAAmBwC,GAAnB,CAAd;AACA,mBAAOT,cAAc,CAACS,GAAD,CAArB;AACD,WAHD,MAGO;AACLR,YAAAA,QAAQ,CAACT,IAAT,CAAc,KAAKzB,WAAL,CAAiB0C,GAAjB,EAAsBf,MAAtB,CAAd;AACAM,YAAAA,cAAc,CAACS,GAAD,CAAd,GAAsBf,MAAtB;AACD;AACF;AACF;AACF;;AAED,WAAOC,OAAO,CAACC,GAAR,CAAYK,QAAZ,CAAP;AACD,GAnVoB;;AAqVrB;AACA,QAAMuC,uBAAN,CAA8BC;AAC9B;AADA,IAEE3B;AACF;AAHA,IAIE;AACA,QAAI,CAAC,KAAKrD,SAAV,EAAqB;AACnB;AACD;;AAED,UAAMiF,QAAQ,GAAI,GAAEtF,oBAAoB,CAACiE,aAAc,GAAEP,MAAM,CAAC6B,SAAU,IAAGF,OAAQ,EAArF;AACA,UAAMlD,SAAS,GAAG,KAAKL,eAAL,CAAqB4B,MAArB,CAAlB;AACA,UAAM8B,OAAO,GAAG,MAAM,KAAKjF,eAAL,CAAqB+E,QAArB,CAAtB;;AAEA,QAAI,CAACE,OAAD,IAAYA,OAAO,CAACrC,MAAR,KAAmB,CAAnC,EAAsC;AACpC;AACD;;AAED,UAAMN,QAAQ,GAAG,CAAC,KAAKhC,aAAL,CAAmByE,QAAnB,CAAD,EAA+B,KAAK3E,WAAL,CAAiBwB,SAAjB,EAA4BqD,OAA5B,CAA/B,CAAjB;AACA,UAAM5C,cAAc,GAAG,MAAM,KAAK9B,eAAL,EAA7B;;AAEA,SAAK,MAAMuC,GAAX,IAAkBT,cAAlB,EAAkC;AAChC,UAAIS,GAAG,KAAKrD,oBAAoB,CAACsD,WAA7B,IAA4CD,GAAG,CAACE,UAAJ,CAAevD,oBAAoB,CAACwD,UAApC,CAAhD,EAAiG;AAC/F,YAAIlB,MAAM,GAAGM,cAAc,CAACS,GAAD,CAAd,IAAuB,EAApC;;AAEA,YAAIf,MAAM,CAACY,QAAP,CAAgBoC,QAAhB,CAAJ,EAA+B;AAC7BhD,UAAAA,MAAM,GAAGA,MAAM,CAACU,MAAP,CAAcC,IAAI,IAAIA,IAAI,KAAKqC,QAA/B,CAAT;AACAhD,UAAAA,MAAM,CAACF,IAAP,CAAYD,SAAZ;AACAU,UAAAA,QAAQ,CAACT,IAAT,CAAc,KAAKzB,WAAL,CAAiB0C,GAAjB,EAAsBf,MAAtB,CAAd;AACAM,UAAAA,cAAc,CAACS,GAAD,CAAd,GAAsBf,MAAtB;AACD;AACF;AACF;;AAED,WAAOC,OAAO,CAACC,GAAR,CAAYK,QAAZ,CAAP;AACD,GAxXoB;;AA0XrB;;;;;;;;;;;AAWA,QAAM4C,gBAAN,GAAyB;AACvB,QAAI,CAAC,KAAKC,cAAL,EAAD,IAA0B,KAAKpF,SAAnC,EAA8C;AAC5C;AACD;;AAED,UAAMsC,cAAc,GAAG,MAAM,KAAK9B,eAAL,EAA7B;AACA,UAAMiC,IAAI,GAAG,EAAb;;AAEA,SAAK,MAAMM,GAAX,IAAkBT,cAAlB,EAAkC;AAChC,UAAIS,GAAG,CAACE,UAAJ,CAAevD,oBAAoB,CAACiE,aAApC,CAAJ,EAAwD;AACtDlB,QAAAA,IAAI,CAACX,IAAL,CAAUiB,GAAV;AACD;AACF;;AAED,QAAIN,IAAI,CAACI,MAAL,KAAgB,CAApB,EAAuB;AACrB;AACD;;AAED,SAAK7C,SAAL,GAAiB,IAAjB;AACA,UAAMqF,YAAY,GAAG,EAArB;;AAEA,SAAK,MAAMtC,GAAX,IAAkBN,IAAlB,EAAwB;AACtB;AACA,UAAI,IAAIwC,SAAJ,EAAezB,QAAf,IAA2BT,GAAG,CAACuC,KAAJ,CAAU,GAAV,CAA/B,CAFsB,CAEyB;;AAE/C,UAAIvC,GAAG,CAACuC,KAAJ,CAAU,GAAV,EAAezC,MAAf,KAA0B,CAA1B,IAA+BE,GAAG,CAACuC,KAAJ,CAAU,GAAV,EAAe,CAAf,MAAsB,MAAzD,EAAiE;AAC/DL,QAAAA,SAAS,GAAG,OAAZ;AACAzB,QAAAA,QAAQ,GAAGT,GAAG,CAACuC,KAAJ,CAAU,GAAV,EAAe,CAAf,CAAX;AACD;;AAED,UAAI9B,QAAQ,CAACP,UAAT,CAAoB,OAApB,CAAJ,EAAkC;AAChC;AACD;;AAED,UAAI,EAAEgC,SAAS,IAAII,YAAf,CAAJ,EAAkC;AAChCA,QAAAA,YAAY,CAACJ,SAAD,CAAZ,GAA0B,IAAI7C,GAAJ,EAA1B;AACD;;AAEDiD,MAAAA,YAAY,CAACJ,SAAD,CAAZ,CAAwBM,GAAxB,CAA4B/B,QAA5B;AACD;;AAED,UAAMgC,aAAa,GAAGhD,MAAM,CAACC,IAAP,CAAY4C,YAAZ,EAA0BvB,GAA1B,CAA8BmB,SAAS,IAAI;AAC/D,YAAMQ,SAAS,GAAG7B,KAAK,CAAC8B,IAAN,CAAWL,YAAY,CAACJ,SAAD,CAAvB,CAAlB;AACA,YAAMU,KAAK,GAAG,IAAIlG,WAAW,CAACI,OAAhB,CAAwBoF,SAAxB,CAAd;AACAU,MAAAA,KAAK,CAACC,KAAN,CAAYH,SAAS,CAAC5C,MAAtB;;AAEA,UAAI4C,SAAS,CAAC5C,MAAV,KAAqB,CAAzB,EAA4B;AAC1B8C,QAAAA,KAAK,CAACE,OAAN,CAAc,UAAd,EAA0BJ,SAAS,CAAC,CAAD,CAAnC;AACD,OAFD,MAEO;AACLE,QAAAA,KAAK,CAACG,WAAN,CAAkB,UAAlB,EAA8BL,SAA9B;AACD;;AAED,aAAOE,KAAK,CAACI,IAAN,EAAP;AACD,KAZqB,CAAtB;;AAcA,QAAI;AACF,YAAMC,SAAS,GAAG,MAAM/D,OAAO,CAACC,GAAR,CAAYsD,aAAZ,CAAxB;AACA,YAAMzE,OAAO,GAAG,GAAGgD,MAAH,CAAUkC,KAAV,CAAgB,EAAhB,EAAoBD,SAApB,CAAhB;AACA,YAAME,WAAW,GAAGnF,OAAO,CAAC+C,GAAR,CAAYV,MAAM,IAAI;AACxC,cAAMvB,SAAS,GAAG,KAAKL,eAAL,CAAqB4B,MAArB,CAAlB;AACA,eAAO,KAAK/C,WAAL,CAAiBwB,SAAjB,EAA4BuB,MAAM,CAAC1B,WAAP,EAA5B,CAAP;AACD,OAHmB,CAApB;AAIA,YAAMO,OAAO,CAACC,GAAR,CAAYgE,WAAZ,CAAN;AACA,WAAKlG,SAAL,GAAiB,KAAjB;AACD,KATD,CASE,OAAOmG,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACD,KAAR,CAAc,gCAAd,EAAgDA,KAAhD;AACA,WAAKnG,SAAL,GAAiB,KAAjB;AACD;AACF,GAzcoB;;AA2crBwB,EAAAA,eAAe,CAAC4B;AAChB;AADe,IAEb;AACA,UAAMI,QAAQ,GAAGJ,MAAM,CAACI,QAAP,IAAmBJ,MAAM,CAACiD,MAAP,EAApC;;AAEA,WAAQ,GAAE3G,oBAAoB,CAACiE,aAAc,GAAEP,MAAM,CAAC6B,SAAU,IAAGzB,QAAS,EAA5E;AACD,GAjdoB;;AAmdrBvC,EAAAA,UAAU,CAACD;AACX;AADU,IAER;AACA,QAAI,CAACA,OAAD,IAAYA,OAAO,KAAKtB,oBAAoB,CAACsD,WAAjD,EAA8D;AAC5D,aAAOtD,oBAAoB,CAACsD,WAA5B;AACD;;AAED,WAAOtD,oBAAoB,CAACwD,UAArB,GAAkClC,OAAzC;AACD,GA3doB;;AA6drBoE,EAAAA,cAAc,GAAG;AACf,QAAI,CAAC,KAAKrF,SAAV,EAAqB;AACnBqG,MAAAA,OAAO,CAACD,KAAR,CAAc,mDAAd;AACD;;AAED,WAAO,KAAKpG,SAAZ;AACD;;AAneoB,CAAvB;AAseAuG,MAAM,CAACC,OAAP,GAAiBzG,cAAjB;;AAEAR,YAAY,CAACO,OAAb,CAAqB2G,2BAArB,CAAiDhH,OAAO,CAAC,4BAAD,CAAxD;;AAEAF,YAAY,CAACO,OAAb,CAAqB4G,iBAArB,CAAuC3G,cAAvC","sourcesContent":["\"use strict\";\n\nvar _CoreManager = _interopRequireDefault(require(\"./CoreManager\"));\n\nvar _ParseQuery = _interopRequireDefault(require(\"./ParseQuery\"));\n\nvar _LocalDatastoreUtils = require(\"./LocalDatastoreUtils\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * Copyright (c) 2015-present, Parse, LLC.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @flow\n */\n\n/**\n * Provides a local datastore which can be used to store and retrieve <code>Parse.Object</code>. <br />\n * To enable this functionality, call <code>Parse.enableLocalDatastore()</code>.\n *\n * Pin object to add to local datastore\n *\n * <pre>await object.pin();</pre>\n * <pre>await object.pinWithName('pinName');</pre>\n *\n * Query pinned objects\n *\n * <pre>query.fromLocalDatastore();</pre>\n * <pre>query.fromPin();</pre>\n * <pre>query.fromPinWithName();</pre>\n *\n * <pre>const localObjects = await query.find();</pre>\n *\n * @class Parse.LocalDatastore\n * @static\n */\n\n\nconst LocalDatastore = {\n  isEnabled: false,\n  isSyncing: false,\n\n  fromPinWithName(name\n  /*: string*/\n  )\n  /*: Promise<Array<Object>>*/\n  {\n    const controller = _CoreManager.default.getLocalDatastoreController();\n\n    return controller.fromPinWithName(name);\n  },\n\n  pinWithName(name\n  /*: string*/\n  , value\n  /*: any*/\n  )\n  /*: Promise<void>*/\n  {\n    const controller = _CoreManager.default.getLocalDatastoreController();\n\n    return controller.pinWithName(name, value);\n  },\n\n  unPinWithName(name\n  /*: string*/\n  )\n  /*: Promise<void>*/\n  {\n    const controller = _CoreManager.default.getLocalDatastoreController();\n\n    return controller.unPinWithName(name);\n  },\n\n  _getAllContents()\n  /*: Promise<Object>*/\n  {\n    const controller = _CoreManager.default.getLocalDatastoreController();\n\n    return controller.getAllContents();\n  },\n\n  // Use for testing\n  _getRawStorage()\n  /*: Promise<Object>*/\n  {\n    const controller = _CoreManager.default.getLocalDatastoreController();\n\n    return controller.getRawStorage();\n  },\n\n  _clear()\n  /*: Promise<void>*/\n  {\n    const controller = _CoreManager.default.getLocalDatastoreController();\n\n    return controller.clear();\n  },\n\n  // Pin the object and children recursively\n  // Saves the object and children key to Pin Name\n  async _handlePinAllWithName(name\n  /*: string*/\n  , objects\n  /*: Array<ParseObject>*/\n  )\n  /*: Promise<void>*/\n  {\n    const pinName = this.getPinName(name);\n    const toPinPromises = [];\n    const objectKeys = [];\n\n    for (const parent of objects) {\n      const children = this._getChildren(parent);\n\n      const parentKey = this.getKeyForObject(parent);\n\n      const json = parent._toFullJSON(undefined, true);\n\n      if (parent._localId) {\n        json._localId = parent._localId;\n      }\n\n      children[parentKey] = json;\n\n      for (const objectKey in children) {\n        objectKeys.push(objectKey);\n        toPinPromises.push(this.pinWithName(objectKey, [children[objectKey]]));\n      }\n    }\n\n    const fromPinPromise = this.fromPinWithName(pinName);\n    const [pinned] = await Promise.all([fromPinPromise, toPinPromises]);\n    const toPin = [...new Set([...(pinned || []), ...objectKeys])];\n    return this.pinWithName(pinName, toPin);\n  },\n\n  // Removes object and children keys from pin name\n  // Keeps the object and children pinned\n  async _handleUnPinAllWithName(name\n  /*: string*/\n  , objects\n  /*: Array<ParseObject>*/\n  ) {\n    const localDatastore = await this._getAllContents();\n    const pinName = this.getPinName(name);\n    const promises = [];\n    let objectKeys = [];\n\n    for (const parent of objects) {\n      const children = this._getChildren(parent);\n\n      const parentKey = this.getKeyForObject(parent);\n      objectKeys.push(parentKey, ...Object.keys(children));\n    }\n\n    objectKeys = [...new Set(objectKeys)];\n    let pinned = localDatastore[pinName] || [];\n    pinned = pinned.filter(item => !objectKeys.includes(item));\n\n    if (pinned.length == 0) {\n      promises.push(this.unPinWithName(pinName));\n      delete localDatastore[pinName];\n    } else {\n      promises.push(this.pinWithName(pinName, pinned));\n      localDatastore[pinName] = pinned;\n    }\n\n    for (const objectKey of objectKeys) {\n      let hasReference = false;\n\n      for (const key in localDatastore) {\n        if (key === _LocalDatastoreUtils.DEFAULT_PIN || key.startsWith(_LocalDatastoreUtils.PIN_PREFIX)) {\n          const pinnedObjects = localDatastore[key] || [];\n\n          if (pinnedObjects.includes(objectKey)) {\n            hasReference = true;\n            break;\n          }\n        }\n      }\n\n      if (!hasReference) {\n        promises.push(this.unPinWithName(objectKey));\n      }\n    }\n\n    return Promise.all(promises);\n  },\n\n  // Retrieve all pointer fields from object recursively\n  _getChildren(object\n  /*: ParseObject*/\n  ) {\n    const encountered = {};\n\n    const json = object._toFullJSON(undefined, true);\n\n    for (const key in json) {\n      if (json[key] && json[key].__type && json[key].__type === 'Object') {\n        this._traverse(json[key], encountered);\n      }\n    }\n\n    return encountered;\n  },\n\n  _traverse(object\n  /*: any*/\n  , encountered\n  /*: any*/\n  ) {\n    if (!object.objectId) {\n      return;\n    } else {\n      const objectKey = this.getKeyForObject(object);\n\n      if (encountered[objectKey]) {\n        return;\n      }\n\n      encountered[objectKey] = object;\n    }\n\n    for (const key in object) {\n      let json = object[key];\n\n      if (!object[key]) {\n        json = object;\n      }\n\n      if (json.__type && json.__type === 'Object') {\n        this._traverse(json, encountered);\n      }\n    }\n  },\n\n  // Transform keys in pin name to objects\n  async _serializeObjectsFromPinName(name\n  /*: string*/\n  ) {\n    const localDatastore = await this._getAllContents();\n    const allObjects = [];\n\n    for (const key in localDatastore) {\n      if (key.startsWith(_LocalDatastoreUtils.OBJECT_PREFIX)) {\n        allObjects.push(localDatastore[key][0]);\n      }\n    }\n\n    if (!name) {\n      return allObjects;\n    }\n\n    const pinName = this.getPinName(name);\n    const pinned = localDatastore[pinName];\n\n    if (!Array.isArray(pinned)) {\n      return [];\n    }\n\n    const promises = pinned.map(objectKey => this.fromPinWithName(objectKey));\n    let objects = await Promise.all(promises);\n    objects = [].concat(...objects);\n    return objects.filter(object => object != null);\n  },\n\n  // Replaces object pointers with pinned pointers\n  // The object pointers may contain old data\n  // Uses Breadth First Search Algorithm\n  async _serializeObject(objectKey\n  /*: string*/\n  , localDatastore\n  /*: any*/\n  ) {\n    let LDS = localDatastore;\n\n    if (!LDS) {\n      LDS = await this._getAllContents();\n    }\n\n    if (!LDS[objectKey] || LDS[objectKey].length === 0) {\n      return null;\n    }\n\n    const root = LDS[objectKey][0];\n    const queue = [];\n    const meta = {};\n    let uniqueId = 0;\n    meta[uniqueId] = root;\n    queue.push(uniqueId);\n\n    while (queue.length !== 0) {\n      const nodeId = queue.shift();\n      const subTreeRoot = meta[nodeId];\n\n      for (const field in subTreeRoot) {\n        const value = subTreeRoot[field];\n\n        if (value.__type && value.__type === 'Object') {\n          const key = this.getKeyForObject(value);\n\n          if (LDS[key] && LDS[key].length > 0) {\n            const pointer = LDS[key][0];\n            uniqueId++;\n            meta[uniqueId] = pointer;\n            subTreeRoot[field] = pointer;\n            queue.push(uniqueId);\n          }\n        }\n      }\n    }\n\n    return root;\n  },\n\n  // Called when an object is save / fetched\n  // Update object pin value\n  async _updateObjectIfPinned(object\n  /*: ParseObject*/\n  )\n  /*: Promise<void>*/\n  {\n    if (!this.isEnabled) {\n      return;\n    }\n\n    const objectKey = this.getKeyForObject(object);\n    const pinned = await this.fromPinWithName(objectKey);\n\n    if (!pinned || pinned.length === 0) {\n      return;\n    }\n\n    return this.pinWithName(objectKey, [object._toFullJSON()]);\n  },\n\n  // Called when object is destroyed\n  // Unpin object and remove all references from pin names\n  // TODO: Destroy children?\n  async _destroyObjectIfPinned(object\n  /*: ParseObject*/\n  ) {\n    if (!this.isEnabled) {\n      return;\n    }\n\n    const localDatastore = await this._getAllContents();\n    const objectKey = this.getKeyForObject(object);\n    const pin = localDatastore[objectKey];\n\n    if (!pin) {\n      return;\n    }\n\n    const promises = [this.unPinWithName(objectKey)];\n    delete localDatastore[objectKey];\n\n    for (const key in localDatastore) {\n      if (key === _LocalDatastoreUtils.DEFAULT_PIN || key.startsWith(_LocalDatastoreUtils.PIN_PREFIX)) {\n        let pinned = localDatastore[key] || [];\n\n        if (pinned.includes(objectKey)) {\n          pinned = pinned.filter(item => item !== objectKey);\n\n          if (pinned.length == 0) {\n            promises.push(this.unPinWithName(key));\n            delete localDatastore[key];\n          } else {\n            promises.push(this.pinWithName(key, pinned));\n            localDatastore[key] = pinned;\n          }\n        }\n      }\n    }\n\n    return Promise.all(promises);\n  },\n\n  // Update pin and references of the unsaved object\n  async _updateLocalIdForObject(localId\n  /*: string*/\n  , object\n  /*: ParseObject*/\n  ) {\n    if (!this.isEnabled) {\n      return;\n    }\n\n    const localKey = `${_LocalDatastoreUtils.OBJECT_PREFIX}${object.className}_${localId}`;\n    const objectKey = this.getKeyForObject(object);\n    const unsaved = await this.fromPinWithName(localKey);\n\n    if (!unsaved || unsaved.length === 0) {\n      return;\n    }\n\n    const promises = [this.unPinWithName(localKey), this.pinWithName(objectKey, unsaved)];\n    const localDatastore = await this._getAllContents();\n\n    for (const key in localDatastore) {\n      if (key === _LocalDatastoreUtils.DEFAULT_PIN || key.startsWith(_LocalDatastoreUtils.PIN_PREFIX)) {\n        let pinned = localDatastore[key] || [];\n\n        if (pinned.includes(localKey)) {\n          pinned = pinned.filter(item => item !== localKey);\n          pinned.push(objectKey);\n          promises.push(this.pinWithName(key, pinned));\n          localDatastore[key] = pinned;\n        }\n      }\n    }\n\n    return Promise.all(promises);\n  },\n\n  /**\n   * Updates Local Datastore from Server\n   *\n   * <pre>\n   * await Parse.LocalDatastore.updateFromServer();\n   * </pre>\n   *\n   * @function updateFromServer\n   * @name Parse.LocalDatastore.updateFromServer\n   * @static\n   */\n  async updateFromServer() {\n    if (!this.checkIfEnabled() || this.isSyncing) {\n      return;\n    }\n\n    const localDatastore = await this._getAllContents();\n    const keys = [];\n\n    for (const key in localDatastore) {\n      if (key.startsWith(_LocalDatastoreUtils.OBJECT_PREFIX)) {\n        keys.push(key);\n      }\n    }\n\n    if (keys.length === 0) {\n      return;\n    }\n\n    this.isSyncing = true;\n    const pointersHash = {};\n\n    for (const key of keys) {\n      // Ignore the OBJECT_PREFIX\n      let [,, className, objectId] = key.split('_'); // User key is split into [ 'Parse', 'LDS', '', 'User', 'objectId' ]\n\n      if (key.split('_').length === 5 && key.split('_')[3] === 'User') {\n        className = '_User';\n        objectId = key.split('_')[4];\n      }\n\n      if (objectId.startsWith('local')) {\n        continue;\n      }\n\n      if (!(className in pointersHash)) {\n        pointersHash[className] = new Set();\n      }\n\n      pointersHash[className].add(objectId);\n    }\n\n    const queryPromises = Object.keys(pointersHash).map(className => {\n      const objectIds = Array.from(pointersHash[className]);\n      const query = new _ParseQuery.default(className);\n      query.limit(objectIds.length);\n\n      if (objectIds.length === 1) {\n        query.equalTo('objectId', objectIds[0]);\n      } else {\n        query.containedIn('objectId', objectIds);\n      }\n\n      return query.find();\n    });\n\n    try {\n      const responses = await Promise.all(queryPromises);\n      const objects = [].concat.apply([], responses);\n      const pinPromises = objects.map(object => {\n        const objectKey = this.getKeyForObject(object);\n        return this.pinWithName(objectKey, object._toFullJSON());\n      });\n      await Promise.all(pinPromises);\n      this.isSyncing = false;\n    } catch (error) {\n      console.error('Error syncing LocalDatastore: ', error);\n      this.isSyncing = false;\n    }\n  },\n\n  getKeyForObject(object\n  /*: any*/\n  ) {\n    const objectId = object.objectId || object._getId();\n\n    return `${_LocalDatastoreUtils.OBJECT_PREFIX}${object.className}_${objectId}`;\n  },\n\n  getPinName(pinName\n  /*: ?string*/\n  ) {\n    if (!pinName || pinName === _LocalDatastoreUtils.DEFAULT_PIN) {\n      return _LocalDatastoreUtils.DEFAULT_PIN;\n    }\n\n    return _LocalDatastoreUtils.PIN_PREFIX + pinName;\n  },\n\n  checkIfEnabled() {\n    if (!this.isEnabled) {\n      console.error('Parse.enableLocalDatastore() must be called first');\n    }\n\n    return this.isEnabled;\n  }\n\n};\nmodule.exports = LocalDatastore;\n\n_CoreManager.default.setLocalDatastoreController(require('./LocalDatastoreController'));\n\n_CoreManager.default.setLocalDatastore(LocalDatastore);"]},"metadata":{},"sourceType":"script"}