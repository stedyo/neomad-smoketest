{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getJobStatus = getJobStatus;\nexports.getJobsData = getJobsData;\nexports.run = run;\nexports.startJob = startJob;\n\nvar _CoreManager = _interopRequireDefault(require(\"./CoreManager\"));\n\nvar _decode = _interopRequireDefault(require(\"./decode\"));\n\nvar _encode = _interopRequireDefault(require(\"./encode\"));\n\nvar _ParseError = _interopRequireDefault(require(\"./ParseError\"));\n\nvar _ParseQuery = _interopRequireDefault(require(\"./ParseQuery\"));\n\nvar _ParseObject = _interopRequireDefault(require(\"./ParseObject\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * Copyright (c) 2015-present, Parse, LLC.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @flow\n */\n\n/**\n * Contains functions for calling and declaring\n * <a href=\"/docs/cloud_code_guide#functions\">cloud functions</a>.\n * <p><strong><em>\n *   Some functions are only available from Cloud Code.\n * </em></strong></p>\n *\n * @class Parse.Cloud\n * @static\n * @hideconstructor\n */\n\n/**\n * Makes a call to a cloud function.\n *\n * @function run\n * @name Parse.Cloud.run\n * @param {string} name The function name.\n * @param {object} data The parameters to send to the cloud function.\n * @param {object} options\n * @returns {Promise} A promise that will be resolved with the result\n * of the function.\n */\n\n\nfunction run(name\n/*: string*/\n, data\n/*: mixed*/\n, options\n/*: RequestOptions*/\n)\n/*: Promise<mixed>*/\n{\n  options = options || {};\n\n  if (typeof name !== 'string' || name.length === 0) {\n    throw new TypeError('Cloud function name must be a string.');\n  }\n\n  const requestOptions = {};\n\n  if (options.useMasterKey) {\n    requestOptions.useMasterKey = options.useMasterKey;\n  }\n\n  if (options.sessionToken) {\n    requestOptions.sessionToken = options.sessionToken;\n  }\n\n  if (options.context && typeof options.context === 'object') {\n    requestOptions.context = options.context;\n  }\n\n  return _CoreManager.default.getCloudController().run(name, data, requestOptions);\n}\n/**\n * Gets data for the current set of cloud jobs.\n *\n * @function getJobsData\n * @name Parse.Cloud.getJobsData\n * @returns {Promise} A promise that will be resolved with the result\n * of the function.\n */\n\n\nfunction getJobsData()\n/*: Promise<Object>*/\n{\n  return _CoreManager.default.getCloudController().getJobsData({\n    useMasterKey: true\n  });\n}\n/**\n * Starts a given cloud job, which will process asynchronously.\n *\n * @function startJob\n * @name Parse.Cloud.startJob\n * @param {string} name The function name.\n * @param {object} data The parameters to send to the cloud function.\n * @returns {Promise} A promise that will be resolved with the jobStatusId\n * of the job.\n */\n\n\nfunction startJob(name\n/*: string*/\n, data\n/*: mixed*/\n)\n/*: Promise<string>*/\n{\n  if (typeof name !== 'string' || name.length === 0) {\n    throw new TypeError('Cloud job name must be a string.');\n  }\n\n  return _CoreManager.default.getCloudController().startJob(name, data, {\n    useMasterKey: true\n  });\n}\n/**\n * Gets job status by Id\n *\n * @function getJobStatus\n * @name Parse.Cloud.getJobStatus\n * @param {string} jobStatusId The Id of Job Status.\n * @returns {Parse.Object} Status of Job.\n */\n\n\nfunction getJobStatus(jobStatusId\n/*: string*/\n)\n/*: Promise<ParseObject>*/\n{\n  const query = new _ParseQuery.default('_JobStatus');\n  return query.get(jobStatusId, {\n    useMasterKey: true\n  });\n}\n\nconst DefaultController = {\n  run(name, data, options\n  /*: RequestOptions*/\n  ) {\n    const RESTController = _CoreManager.default.getRESTController();\n\n    const payload = (0, _encode.default)(data, true);\n    const request = RESTController.request('POST', 'functions/' + name, payload, options);\n    return request.then(res => {\n      if (typeof res === 'object' && Object.keys(res).length > 0 && !res.hasOwnProperty('result')) {\n        throw new _ParseError.default(_ParseError.default.INVALID_JSON, 'The server returned an invalid response.');\n      }\n\n      const decoded = (0, _decode.default)(res);\n\n      if (decoded && decoded.hasOwnProperty('result')) {\n        return Promise.resolve(decoded.result);\n      }\n\n      return Promise.resolve(undefined);\n    });\n  },\n\n  getJobsData(options\n  /*: RequestOptions*/\n  ) {\n    const RESTController = _CoreManager.default.getRESTController();\n\n    return RESTController.request('GET', 'cloud_code/jobs/data', null, options);\n  },\n\n  startJob(name, data, options\n  /*: RequestOptions*/\n  ) {\n    const RESTController = _CoreManager.default.getRESTController();\n\n    const payload = (0, _encode.default)(data, true);\n    return RESTController.request('POST', 'jobs/' + name, payload, options);\n  }\n\n};\n\n_CoreManager.default.setCloudController(DefaultController);","map":{"version":3,"sources":["/Users/szd/Dev/ycomms-smoketest-landing-page/node_modules/parse/lib/node/Cloud.js"],"names":["Object","defineProperty","exports","value","getJobStatus","getJobsData","run","startJob","_CoreManager","_interopRequireDefault","require","_decode","_encode","_ParseError","_ParseQuery","_ParseObject","obj","__esModule","default","name","data","options","length","TypeError","requestOptions","useMasterKey","sessionToken","context","getCloudController","jobStatusId","query","get","DefaultController","RESTController","getRESTController","payload","request","then","res","keys","hasOwnProperty","INVALID_JSON","decoded","Promise","resolve","result","undefined","setCloudController"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getJobStatus = getJobStatus;\nexports.getJobsData = getJobsData;\nexports.run = run;\nexports.startJob = startJob;\n\nvar _CoreManager = _interopRequireDefault(require(\"./CoreManager\"));\n\nvar _decode = _interopRequireDefault(require(\"./decode\"));\n\nvar _encode = _interopRequireDefault(require(\"./encode\"));\n\nvar _ParseError = _interopRequireDefault(require(\"./ParseError\"));\n\nvar _ParseQuery = _interopRequireDefault(require(\"./ParseQuery\"));\n\nvar _ParseObject = _interopRequireDefault(require(\"./ParseObject\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * Copyright (c) 2015-present, Parse, LLC.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @flow\n */\n\n/**\n * Contains functions for calling and declaring\n * <a href=\"/docs/cloud_code_guide#functions\">cloud functions</a>.\n * <p><strong><em>\n *   Some functions are only available from Cloud Code.\n * </em></strong></p>\n *\n * @class Parse.Cloud\n * @static\n * @hideconstructor\n */\n\n/**\n * Makes a call to a cloud function.\n *\n * @function run\n * @name Parse.Cloud.run\n * @param {string} name The function name.\n * @param {object} data The parameters to send to the cloud function.\n * @param {object} options\n * @returns {Promise} A promise that will be resolved with the result\n * of the function.\n */\n\n\nfunction run(name\n/*: string*/\n, data\n/*: mixed*/\n, options\n/*: RequestOptions*/\n)\n/*: Promise<mixed>*/\n{\n  options = options || {};\n\n  if (typeof name !== 'string' || name.length === 0) {\n    throw new TypeError('Cloud function name must be a string.');\n  }\n\n  const requestOptions = {};\n\n  if (options.useMasterKey) {\n    requestOptions.useMasterKey = options.useMasterKey;\n  }\n\n  if (options.sessionToken) {\n    requestOptions.sessionToken = options.sessionToken;\n  }\n\n  if (options.context && typeof options.context === 'object') {\n    requestOptions.context = options.context;\n  }\n\n  return _CoreManager.default.getCloudController().run(name, data, requestOptions);\n}\n/**\n * Gets data for the current set of cloud jobs.\n *\n * @function getJobsData\n * @name Parse.Cloud.getJobsData\n * @returns {Promise} A promise that will be resolved with the result\n * of the function.\n */\n\n\nfunction getJobsData()\n/*: Promise<Object>*/\n{\n  return _CoreManager.default.getCloudController().getJobsData({\n    useMasterKey: true\n  });\n}\n/**\n * Starts a given cloud job, which will process asynchronously.\n *\n * @function startJob\n * @name Parse.Cloud.startJob\n * @param {string} name The function name.\n * @param {object} data The parameters to send to the cloud function.\n * @returns {Promise} A promise that will be resolved with the jobStatusId\n * of the job.\n */\n\n\nfunction startJob(name\n/*: string*/\n, data\n/*: mixed*/\n)\n/*: Promise<string>*/\n{\n  if (typeof name !== 'string' || name.length === 0) {\n    throw new TypeError('Cloud job name must be a string.');\n  }\n\n  return _CoreManager.default.getCloudController().startJob(name, data, {\n    useMasterKey: true\n  });\n}\n/**\n * Gets job status by Id\n *\n * @function getJobStatus\n * @name Parse.Cloud.getJobStatus\n * @param {string} jobStatusId The Id of Job Status.\n * @returns {Parse.Object} Status of Job.\n */\n\n\nfunction getJobStatus(jobStatusId\n/*: string*/\n)\n/*: Promise<ParseObject>*/\n{\n  const query = new _ParseQuery.default('_JobStatus');\n  return query.get(jobStatusId, {\n    useMasterKey: true\n  });\n}\n\nconst DefaultController = {\n  run(name, data, options\n  /*: RequestOptions*/\n  ) {\n    const RESTController = _CoreManager.default.getRESTController();\n\n    const payload = (0, _encode.default)(data, true);\n    const request = RESTController.request('POST', 'functions/' + name, payload, options);\n    return request.then(res => {\n      if (typeof res === 'object' && Object.keys(res).length > 0 && !res.hasOwnProperty('result')) {\n        throw new _ParseError.default(_ParseError.default.INVALID_JSON, 'The server returned an invalid response.');\n      }\n\n      const decoded = (0, _decode.default)(res);\n\n      if (decoded && decoded.hasOwnProperty('result')) {\n        return Promise.resolve(decoded.result);\n      }\n\n      return Promise.resolve(undefined);\n    });\n  },\n\n  getJobsData(options\n  /*: RequestOptions*/\n  ) {\n    const RESTController = _CoreManager.default.getRESTController();\n\n    return RESTController.request('GET', 'cloud_code/jobs/data', null, options);\n  },\n\n  startJob(name, data, options\n  /*: RequestOptions*/\n  ) {\n    const RESTController = _CoreManager.default.getRESTController();\n\n    const payload = (0, _encode.default)(data, true);\n    return RESTController.request('POST', 'jobs/' + name, payload, options);\n  }\n\n};\n\n_CoreManager.default.setCloudController(DefaultController);"]},"metadata":{},"sourceType":"script"}