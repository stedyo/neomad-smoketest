{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = parseDate;\n/**\n * Copyright (c) 2015-present, Parse, LLC.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @flow\n */\n\nfunction parseDate(iso8601\n/*: string*/\n)\n/*: ?Date*/\n{\n  const regexp = new RegExp('^([0-9]{1,4})-([0-9]{1,2})-([0-9]{1,2})' + 'T' + '([0-9]{1,2}):([0-9]{1,2}):([0-9]{1,2})' + '(.([0-9]+))?' + 'Z$');\n  const match = regexp.exec(iso8601);\n\n  if (!match) {\n    return null;\n  }\n\n  const year = parseInt(match[1]) || 0;\n  const month = (parseInt(match[2]) || 1) - 1;\n  const day = parseInt(match[3]) || 0;\n  const hour = parseInt(match[4]) || 0;\n  const minute = parseInt(match[5]) || 0;\n  const second = parseInt(match[6]) || 0;\n  const milli = parseInt(match[8]) || 0;\n  return new Date(Date.UTC(year, month, day, hour, minute, second, milli));\n}","map":{"version":3,"sources":["/Users/szd/Dev/ycomms-smoketest-landing-page/node_modules/parse/lib/node/parseDate.js"],"names":["Object","defineProperty","exports","value","default","parseDate","iso8601","regexp","RegExp","match","exec","year","parseInt","month","day","hour","minute","second","milli","Date","UTC"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBC,SAAlB;AACA;;;;;;;;;;;AAWA,SAASA,SAAT,CAAmBC;AACnB;AADA;AAGA;AACA;AACE,QAAMC,MAAM,GAAG,IAAIC,MAAJ,CAAW,4CAA4C,GAA5C,GAAkD,wCAAlD,GAA6F,cAA7F,GAA8G,IAAzH,CAAf;AACA,QAAMC,KAAK,GAAGF,MAAM,CAACG,IAAP,CAAYJ,OAAZ,CAAd;;AAEA,MAAI,CAACG,KAAL,EAAY;AACV,WAAO,IAAP;AACD;;AAED,QAAME,IAAI,GAAGC,QAAQ,CAACH,KAAK,CAAC,CAAD,CAAN,CAAR,IAAsB,CAAnC;AACA,QAAMI,KAAK,GAAG,CAACD,QAAQ,CAACH,KAAK,CAAC,CAAD,CAAN,CAAR,IAAsB,CAAvB,IAA4B,CAA1C;AACA,QAAMK,GAAG,GAAGF,QAAQ,CAACH,KAAK,CAAC,CAAD,CAAN,CAAR,IAAsB,CAAlC;AACA,QAAMM,IAAI,GAAGH,QAAQ,CAACH,KAAK,CAAC,CAAD,CAAN,CAAR,IAAsB,CAAnC;AACA,QAAMO,MAAM,GAAGJ,QAAQ,CAACH,KAAK,CAAC,CAAD,CAAN,CAAR,IAAsB,CAArC;AACA,QAAMQ,MAAM,GAAGL,QAAQ,CAACH,KAAK,CAAC,CAAD,CAAN,CAAR,IAAsB,CAArC;AACA,QAAMS,KAAK,GAAGN,QAAQ,CAACH,KAAK,CAAC,CAAD,CAAN,CAAR,IAAsB,CAApC;AACA,SAAO,IAAIU,IAAJ,CAASA,IAAI,CAACC,GAAL,CAAST,IAAT,EAAeE,KAAf,EAAsBC,GAAtB,EAA2BC,IAA3B,EAAiCC,MAAjC,EAAyCC,MAAzC,EAAiDC,KAAjD,CAAT,CAAP;AACD","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = parseDate;\n/**\n * Copyright (c) 2015-present, Parse, LLC.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @flow\n */\n\nfunction parseDate(iso8601\n/*: string*/\n)\n/*: ?Date*/\n{\n  const regexp = new RegExp('^([0-9]{1,4})-([0-9]{1,2})-([0-9]{1,2})' + 'T' + '([0-9]{1,2}):([0-9]{1,2}):([0-9]{1,2})' + '(.([0-9]+))?' + 'Z$');\n  const match = regexp.exec(iso8601);\n\n  if (!match) {\n    return null;\n  }\n\n  const year = parseInt(match[1]) || 0;\n  const month = (parseInt(match[2]) || 1) - 1;\n  const day = parseInt(match[3]) || 0;\n  const hour = parseInt(match[4]) || 0;\n  const minute = parseInt(match[5]) || 0;\n  const second = parseInt(match[6]) || 0;\n  const milli = parseInt(match[8]) || 0;\n  return new Date(Date.UTC(year, month, day, hour, minute, second, milli));\n}"]},"metadata":{},"sourceType":"script"}