{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = escape;\n/*\n * Copyright (c) 2015-present, Parse, LLC.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @flow\n */\n\nconst encoded = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '/': '&#x2F;',\n  \"'\": '&#x27;',\n  '\"': '&quot;'\n};\n\nfunction escape(str\n/*: string*/\n)\n/*: string*/\n{\n  return str.replace(/[&<>\\/'\"]/g, function (char) {\n    return encoded[char];\n  });\n}","map":{"version":3,"sources":["/Users/szd/Dev/ycomms-smoketest-landing-page/node_modules/parse/lib/node/escape.js"],"names":["Object","defineProperty","exports","value","default","escape","encoded","str","replace","char"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBC,MAAlB;AACA;;;;;;;;;;;AAWA,MAAMC,OAAO,GAAG;AACd,OAAK,OADS;AAEd,OAAK,MAFS;AAGd,OAAK,MAHS;AAId,OAAK,QAJS;AAKd,OAAK,QALS;AAMd,OAAK;AANS,CAAhB;;AASA,SAASD,MAAT,CAAgBE;AAChB;AADA;AAGA;AACA;AACE,SAAOA,GAAG,CAACC,OAAJ,CAAY,YAAZ,EAA0B,UAAUC,IAAV,EAAgB;AAC/C,WAAOH,OAAO,CAACG,IAAD,CAAd;AACD,GAFM,CAAP;AAGD","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = escape;\n/*\n * Copyright (c) 2015-present, Parse, LLC.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @flow\n */\n\nconst encoded = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '/': '&#x2F;',\n  \"'\": '&#x27;',\n  '\"': '&quot;'\n};\n\nfunction escape(str\n/*: string*/\n)\n/*: string*/\n{\n  return str.replace(/[&<>\\/'\"]/g, function (char) {\n    return encoded[char];\n  });\n}"]},"metadata":{},"sourceType":"script"}