{"ast":null,"code":"\"use strict\";\n\nvar _promiseUtils = require(\"./promiseUtils\");\n/**\n * Copyright (c) 2015-present, Parse, LLC.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @flow\n */\n\n\nclass TaskQueue {\n  /*:: queue: Array<Task>;*/\n  constructor() {\n    this.queue = [];\n  }\n\n  enqueue(task\n  /*: () => Promise*/\n  )\n  /*: Promise*/\n  {\n    const taskComplete = new _promiseUtils.resolvingPromise();\n    this.queue.push({\n      task: task,\n      _completion: taskComplete\n    });\n\n    if (this.queue.length === 1) {\n      task().then(() => {\n        this._dequeue();\n\n        taskComplete.resolve();\n      }, error => {\n        this._dequeue();\n\n        taskComplete.reject(error);\n      });\n    }\n\n    return taskComplete;\n  }\n\n  _dequeue() {\n    this.queue.shift();\n\n    if (this.queue.length) {\n      const next = this.queue[0];\n      next.task().then(() => {\n        this._dequeue();\n\n        next._completion.resolve();\n      }, error => {\n        this._dequeue();\n\n        next._completion.reject(error);\n      });\n    }\n  }\n\n}\n\nmodule.exports = TaskQueue;","map":{"version":3,"sources":["/Users/szd/Dev/ycomms-smoketest-landing-page/node_modules/parse/lib/node/TaskQueue.js"],"names":["_promiseUtils","require","TaskQueue","constructor","queue","enqueue","task","taskComplete","resolvingPromise","push","_completion","length","then","_dequeue","resolve","error","reject","shift","next","module","exports"],"mappings":"AAAA;;AAEA,IAAIA,aAAa,GAAGC,OAAO,CAAC,gBAAD,CAA3B;AACA;;;;;;;;;;;;AAYA,MAAMC,SAAN,CAAgB;AACd;AACAC,EAAAA,WAAW,GAAG;AACZ,SAAKC,KAAL,GAAa,EAAb;AACD;;AAEDC,EAAAA,OAAO,CAACC;AACR;AADO;AAGP;AACA;AACE,UAAMC,YAAY,GAAG,IAAIP,aAAa,CAACQ,gBAAlB,EAArB;AACA,SAAKJ,KAAL,CAAWK,IAAX,CAAgB;AACdH,MAAAA,IAAI,EAAEA,IADQ;AAEdI,MAAAA,WAAW,EAAEH;AAFC,KAAhB;;AAKA,QAAI,KAAKH,KAAL,CAAWO,MAAX,KAAsB,CAA1B,EAA6B;AAC3BL,MAAAA,IAAI,GAAGM,IAAP,CAAY,MAAM;AAChB,aAAKC,QAAL;;AAEAN,QAAAA,YAAY,CAACO,OAAb;AACD,OAJD,EAIGC,KAAK,IAAI;AACV,aAAKF,QAAL;;AAEAN,QAAAA,YAAY,CAACS,MAAb,CAAoBD,KAApB;AACD,OARD;AASD;;AAED,WAAOR,YAAP;AACD;;AAEDM,EAAAA,QAAQ,GAAG;AACT,SAAKT,KAAL,CAAWa,KAAX;;AAEA,QAAI,KAAKb,KAAL,CAAWO,MAAf,EAAuB;AACrB,YAAMO,IAAI,GAAG,KAAKd,KAAL,CAAW,CAAX,CAAb;AACAc,MAAAA,IAAI,CAACZ,IAAL,GAAYM,IAAZ,CAAiB,MAAM;AACrB,aAAKC,QAAL;;AAEAK,QAAAA,IAAI,CAACR,WAAL,CAAiBI,OAAjB;AACD,OAJD,EAIGC,KAAK,IAAI;AACV,aAAKF,QAAL;;AAEAK,QAAAA,IAAI,CAACR,WAAL,CAAiBM,MAAjB,CAAwBD,KAAxB;AACD,OARD;AASD;AACF;;AA/Ca;;AAmDhBI,MAAM,CAACC,OAAP,GAAiBlB,SAAjB","sourcesContent":["\"use strict\";\n\nvar _promiseUtils = require(\"./promiseUtils\");\n/**\n * Copyright (c) 2015-present, Parse, LLC.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @flow\n */\n\n\nclass TaskQueue {\n  /*:: queue: Array<Task>;*/\n  constructor() {\n    this.queue = [];\n  }\n\n  enqueue(task\n  /*: () => Promise*/\n  )\n  /*: Promise*/\n  {\n    const taskComplete = new _promiseUtils.resolvingPromise();\n    this.queue.push({\n      task: task,\n      _completion: taskComplete\n    });\n\n    if (this.queue.length === 1) {\n      task().then(() => {\n        this._dequeue();\n\n        taskComplete.resolve();\n      }, error => {\n        this._dequeue();\n\n        taskComplete.reject(error);\n      });\n    }\n\n    return taskComplete;\n  }\n\n  _dequeue() {\n    this.queue.shift();\n\n    if (this.queue.length) {\n      const next = this.queue[0];\n      next.task().then(() => {\n        this._dequeue();\n\n        next._completion.resolve();\n      }, error => {\n        this._dequeue();\n\n        next._completion.reject(error);\n      });\n    }\n  }\n\n}\n\nmodule.exports = TaskQueue;"]},"metadata":{},"sourceType":"script"}