{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = decode;\n\nvar _ParseACL = _interopRequireDefault(require(\"./ParseACL\"));\n\nvar _ParseFile = _interopRequireDefault(require(\"./ParseFile\"));\n\nvar _ParseGeoPoint = _interopRequireDefault(require(\"./ParseGeoPoint\"));\n\nvar _ParsePolygon = _interopRequireDefault(require(\"./ParsePolygon\"));\n\nvar _ParseObject = _interopRequireDefault(require(\"./ParseObject\"));\n\nvar _ParseOp = require(\"./ParseOp\");\n\nvar _ParseRelation = _interopRequireDefault(require(\"./ParseRelation\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * Copyright (c) 2015-present, Parse, LLC.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @flow\n */\n// eslint-disable-line no-unused-vars\n\n\nfunction decode(value\n/*: any*/\n)\n/*: any*/\n{\n  if (value === null || typeof value !== 'object' || value instanceof Date) {\n    return value;\n  }\n\n  if (Array.isArray(value)) {\n    const dup = [];\n    value.forEach((v, i) => {\n      dup[i] = decode(v);\n    });\n    return dup;\n  }\n\n  if (typeof value.__op === 'string') {\n    return (0, _ParseOp.opFromJSON)(value);\n  }\n\n  if (value.__type === 'Pointer' && value.className) {\n    return _ParseObject.default.fromJSON(value);\n  }\n\n  if (value.__type === 'Object' && value.className) {\n    return _ParseObject.default.fromJSON(value);\n  }\n\n  if (value.__type === 'Relation') {\n    // The parent and key fields will be populated by the parent\n    const relation = new _ParseRelation.default(null, null);\n    relation.targetClassName = value.className;\n    return relation;\n  }\n\n  if (value.__type === 'Date') {\n    return new Date(value.iso);\n  }\n\n  if (value.__type === 'File') {\n    return _ParseFile.default.fromJSON(value);\n  }\n\n  if (value.__type === 'GeoPoint') {\n    return new _ParseGeoPoint.default({\n      latitude: value.latitude,\n      longitude: value.longitude\n    });\n  }\n\n  if (value.__type === 'Polygon') {\n    return new _ParsePolygon.default(value.coordinates);\n  }\n\n  const copy = {};\n\n  for (const k in value) {\n    copy[k] = decode(value[k]);\n  }\n\n  return copy;\n}","map":{"version":3,"sources":["/Users/szd/Dev/ycomms-smoketest-landing-page/node_modules/parse/lib/node/decode.js"],"names":["Object","defineProperty","exports","value","default","decode","_ParseACL","_interopRequireDefault","require","_ParseFile","_ParseGeoPoint","_ParsePolygon","_ParseObject","_ParseOp","_ParseRelation","obj","__esModule","Date","Array","isArray","dup","forEach","v","i","__op","opFromJSON","__type","className","fromJSON","relation","targetClassName","iso","latitude","longitude","coordinates","copy","k"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = decode;\n\nvar _ParseACL = _interopRequireDefault(require(\"./ParseACL\"));\n\nvar _ParseFile = _interopRequireDefault(require(\"./ParseFile\"));\n\nvar _ParseGeoPoint = _interopRequireDefault(require(\"./ParseGeoPoint\"));\n\nvar _ParsePolygon = _interopRequireDefault(require(\"./ParsePolygon\"));\n\nvar _ParseObject = _interopRequireDefault(require(\"./ParseObject\"));\n\nvar _ParseOp = require(\"./ParseOp\");\n\nvar _ParseRelation = _interopRequireDefault(require(\"./ParseRelation\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * Copyright (c) 2015-present, Parse, LLC.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @flow\n */\n// eslint-disable-line no-unused-vars\n\n\nfunction decode(value\n/*: any*/\n)\n/*: any*/\n{\n  if (value === null || typeof value !== 'object' || value instanceof Date) {\n    return value;\n  }\n\n  if (Array.isArray(value)) {\n    const dup = [];\n    value.forEach((v, i) => {\n      dup[i] = decode(v);\n    });\n    return dup;\n  }\n\n  if (typeof value.__op === 'string') {\n    return (0, _ParseOp.opFromJSON)(value);\n  }\n\n  if (value.__type === 'Pointer' && value.className) {\n    return _ParseObject.default.fromJSON(value);\n  }\n\n  if (value.__type === 'Object' && value.className) {\n    return _ParseObject.default.fromJSON(value);\n  }\n\n  if (value.__type === 'Relation') {\n    // The parent and key fields will be populated by the parent\n    const relation = new _ParseRelation.default(null, null);\n    relation.targetClassName = value.className;\n    return relation;\n  }\n\n  if (value.__type === 'Date') {\n    return new Date(value.iso);\n  }\n\n  if (value.__type === 'File') {\n    return _ParseFile.default.fromJSON(value);\n  }\n\n  if (value.__type === 'GeoPoint') {\n    return new _ParseGeoPoint.default({\n      latitude: value.latitude,\n      longitude: value.longitude\n    });\n  }\n\n  if (value.__type === 'Polygon') {\n    return new _ParsePolygon.default(value.coordinates);\n  }\n\n  const copy = {};\n\n  for (const k in value) {\n    copy[k] = decode(value[k]);\n  }\n\n  return copy;\n}"]},"metadata":{},"sourceType":"script"}