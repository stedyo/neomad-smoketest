{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getPushStatus = getPushStatus;\nexports.send = send;\n\nvar _CoreManager = _interopRequireDefault(require(\"./CoreManager\"));\n\nvar _ParseQuery = _interopRequireDefault(require(\"./ParseQuery\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * Copyright (c) 2015-present, Parse, LLC.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @flow\n */\n\n/**\n * Contains functions to deal with Push in Parse.\n *\n * @class Parse.Push\n * @static\n * @hideconstructor\n */\n\n/**\n * Sends a push notification.\n * **Available in Cloud Code only.**\n *\n * See {@link https://docs.parseplatform.org/js/guide/#push-notifications Push Notification Guide}\n *\n * @function send\n * @name Parse.Push.send\n * @param {object} data -  The data of the push notification. Valid fields\n * are:\n *   <ol>\n *     <li>channels - An Array of channels to push to.</li>\n *     <li>push_time - A Date object for when to send the push.</li>\n *     <li>expiration_time -  A Date object for when to expire\n *         the push.</li>\n *     <li>expiration_interval - The seconds from now to expire the push.</li>\n *     <li>where - A Parse.Query over Parse.Installation that is used to match\n *         a set of installations to push to.</li>\n *     <li>data - The data to send as part of the push.</li>\n *   <ol>\n * @param {object} options Valid options\n * are:<ul>\n *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n *     be used for this request.\n * </ul>\n * @returns {Promise} A promise that is fulfilled when the push request\n *     completes.\n */\n\n\nfunction send(data\n/*: PushData*/\n, options\n/*:: ?: FullOptions*/\n= {})\n/*: Promise*/\n{\n  if (data.where && data.where instanceof _ParseQuery.default) {\n    data.where = data.where.toJSON().where;\n  }\n\n  if (data.push_time && typeof data.push_time === 'object') {\n    data.push_time = data.push_time.toJSON();\n  }\n\n  if (data.expiration_time && typeof data.expiration_time === 'object') {\n    data.expiration_time = data.expiration_time.toJSON();\n  }\n\n  if (data.expiration_time && data.expiration_interval) {\n    throw new Error('expiration_time and expiration_interval cannot both be set.');\n  }\n\n  const pushOptions = {\n    useMasterKey: true\n  };\n\n  if (options.hasOwnProperty('useMasterKey')) {\n    pushOptions.useMasterKey = options.useMasterKey;\n  }\n\n  return _CoreManager.default.getPushController().send(data, pushOptions);\n}\n/**\n * Gets push status by Id\n *\n * @function getPushStatus\n * @name Parse.Push.getPushStatus\n * @param {string} pushStatusId The Id of Push Status.\n * @param {object} options Valid options\n * are:<ul>\n *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n *     be used for this request.\n * </ul>\n * @returns {Parse.Object} Status of Push.\n */\n\n\nfunction getPushStatus(pushStatusId\n/*: string*/\n, options\n/*:: ?: FullOptions*/\n= {})\n/*: Promise<string>*/\n{\n  const pushOptions = {\n    useMasterKey: true\n  };\n\n  if (options.hasOwnProperty('useMasterKey')) {\n    pushOptions.useMasterKey = options.useMasterKey;\n  }\n\n  const query = new _ParseQuery.default('_PushStatus');\n  return query.get(pushStatusId, pushOptions);\n}\n\nconst DefaultController = {\n  send(data\n  /*: PushData*/\n  , options\n  /*:: ?: FullOptions*/\n  ) {\n    return _CoreManager.default.getRESTController().request('POST', 'push', data, options);\n  }\n\n};\n\n_CoreManager.default.setPushController(DefaultController);","map":{"version":3,"sources":["/Users/szd/Dev/ycomms-smoketest-landing-page/node_modules/parse/lib/node/Push.js"],"names":["Object","defineProperty","exports","value","getPushStatus","send","_CoreManager","_interopRequireDefault","require","_ParseQuery","obj","__esModule","default","data","options","where","toJSON","push_time","expiration_time","expiration_interval","Error","pushOptions","useMasterKey","hasOwnProperty","getPushController","pushStatusId","query","get","DefaultController","getRESTController","request","setPushController"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getPushStatus = getPushStatus;\nexports.send = send;\n\nvar _CoreManager = _interopRequireDefault(require(\"./CoreManager\"));\n\nvar _ParseQuery = _interopRequireDefault(require(\"./ParseQuery\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * Copyright (c) 2015-present, Parse, LLC.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @flow\n */\n\n/**\n * Contains functions to deal with Push in Parse.\n *\n * @class Parse.Push\n * @static\n * @hideconstructor\n */\n\n/**\n * Sends a push notification.\n * **Available in Cloud Code only.**\n *\n * See {@link https://docs.parseplatform.org/js/guide/#push-notifications Push Notification Guide}\n *\n * @function send\n * @name Parse.Push.send\n * @param {object} data -  The data of the push notification. Valid fields\n * are:\n *   <ol>\n *     <li>channels - An Array of channels to push to.</li>\n *     <li>push_time - A Date object for when to send the push.</li>\n *     <li>expiration_time -  A Date object for when to expire\n *         the push.</li>\n *     <li>expiration_interval - The seconds from now to expire the push.</li>\n *     <li>where - A Parse.Query over Parse.Installation that is used to match\n *         a set of installations to push to.</li>\n *     <li>data - The data to send as part of the push.</li>\n *   <ol>\n * @param {object} options Valid options\n * are:<ul>\n *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n *     be used for this request.\n * </ul>\n * @returns {Promise} A promise that is fulfilled when the push request\n *     completes.\n */\n\n\nfunction send(data\n/*: PushData*/\n, options\n/*:: ?: FullOptions*/\n= {})\n/*: Promise*/\n{\n  if (data.where && data.where instanceof _ParseQuery.default) {\n    data.where = data.where.toJSON().where;\n  }\n\n  if (data.push_time && typeof data.push_time === 'object') {\n    data.push_time = data.push_time.toJSON();\n  }\n\n  if (data.expiration_time && typeof data.expiration_time === 'object') {\n    data.expiration_time = data.expiration_time.toJSON();\n  }\n\n  if (data.expiration_time && data.expiration_interval) {\n    throw new Error('expiration_time and expiration_interval cannot both be set.');\n  }\n\n  const pushOptions = {\n    useMasterKey: true\n  };\n\n  if (options.hasOwnProperty('useMasterKey')) {\n    pushOptions.useMasterKey = options.useMasterKey;\n  }\n\n  return _CoreManager.default.getPushController().send(data, pushOptions);\n}\n/**\n * Gets push status by Id\n *\n * @function getPushStatus\n * @name Parse.Push.getPushStatus\n * @param {string} pushStatusId The Id of Push Status.\n * @param {object} options Valid options\n * are:<ul>\n *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n *     be used for this request.\n * </ul>\n * @returns {Parse.Object} Status of Push.\n */\n\n\nfunction getPushStatus(pushStatusId\n/*: string*/\n, options\n/*:: ?: FullOptions*/\n= {})\n/*: Promise<string>*/\n{\n  const pushOptions = {\n    useMasterKey: true\n  };\n\n  if (options.hasOwnProperty('useMasterKey')) {\n    pushOptions.useMasterKey = options.useMasterKey;\n  }\n\n  const query = new _ParseQuery.default('_PushStatus');\n  return query.get(pushStatusId, pushOptions);\n}\n\nconst DefaultController = {\n  send(data\n  /*: PushData*/\n  , options\n  /*:: ?: FullOptions*/\n  ) {\n    return _CoreManager.default.getRESTController().request('POST', 'push', data, options);\n  }\n\n};\n\n_CoreManager.default.setPushController(DefaultController);"]},"metadata":{},"sourceType":"script"}