{"ast":null,"code":"\"use strict\";\n/**\n * Copyright (c) 2015-present, Parse, LLC.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @flow\n * @private\n */\n// When there is no native storage interface, we default to an in-memory map\n\nconst memMap = {};\nconst StorageController = {\n  async: 0,\n\n  getItem(path\n  /*: string*/\n  )\n  /*: ?string*/\n  {\n    if (memMap.hasOwnProperty(path)) {\n      return memMap[path];\n    }\n\n    return null;\n  },\n\n  setItem(path\n  /*: string*/\n  , value\n  /*: string*/\n  ) {\n    memMap[path] = String(value);\n  },\n\n  removeItem(path\n  /*: string*/\n  ) {\n    delete memMap[path];\n  },\n\n  getAllKeys() {\n    return Object.keys(memMap);\n  },\n\n  clear() {\n    for (const key in memMap) {\n      if (memMap.hasOwnProperty(key)) {\n        delete memMap[key];\n      }\n    }\n  }\n\n};\nmodule.exports = StorageController;","map":{"version":3,"sources":["/Users/szd/Dev/ycomms-smoketest-landing-page/node_modules/parse/lib/node/StorageController.default.js"],"names":["memMap","StorageController","async","getItem","path","hasOwnProperty","setItem","value","String","removeItem","getAllKeys","Object","keys","clear","key","module","exports"],"mappings":"AAAA;AACA;;;;;;;;;;;AAWA;;AAEA,MAAMA,MAAM,GAAG,EAAf;AACA,MAAMC,iBAAiB,GAAG;AACxBC,EAAAA,KAAK,EAAE,CADiB;;AAGxBC,EAAAA,OAAO,CAACC;AACR;AADO;AAGP;AACA;AACE,QAAIJ,MAAM,CAACK,cAAP,CAAsBD,IAAtB,CAAJ,EAAiC;AAC/B,aAAOJ,MAAM,CAACI,IAAD,CAAb;AACD;;AAED,WAAO,IAAP;AACD,GAbuB;;AAexBE,EAAAA,OAAO,CAACF;AACR;AADO,IAELG;AACF;AAHO,IAIL;AACAP,IAAAA,MAAM,CAACI,IAAD,CAAN,GAAeI,MAAM,CAACD,KAAD,CAArB;AACD,GArBuB;;AAuBxBE,EAAAA,UAAU,CAACL;AACX;AADU,IAER;AACA,WAAOJ,MAAM,CAACI,IAAD,CAAb;AACD,GA3BuB;;AA6BxBM,EAAAA,UAAU,GAAG;AACX,WAAOC,MAAM,CAACC,IAAP,CAAYZ,MAAZ,CAAP;AACD,GA/BuB;;AAiCxBa,EAAAA,KAAK,GAAG;AACN,SAAK,MAAMC,GAAX,IAAkBd,MAAlB,EAA0B;AACxB,UAAIA,MAAM,CAACK,cAAP,CAAsBS,GAAtB,CAAJ,EAAgC;AAC9B,eAAOd,MAAM,CAACc,GAAD,CAAb;AACD;AACF;AACF;;AAvCuB,CAA1B;AA0CAC,MAAM,CAACC,OAAP,GAAiBf,iBAAjB","sourcesContent":["\"use strict\";\n/**\n * Copyright (c) 2015-present, Parse, LLC.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @flow\n * @private\n */\n// When there is no native storage interface, we default to an in-memory map\n\nconst memMap = {};\nconst StorageController = {\n  async: 0,\n\n  getItem(path\n  /*: string*/\n  )\n  /*: ?string*/\n  {\n    if (memMap.hasOwnProperty(path)) {\n      return memMap[path];\n    }\n\n    return null;\n  },\n\n  setItem(path\n  /*: string*/\n  , value\n  /*: string*/\n  ) {\n    memMap[path] = String(value);\n  },\n\n  removeItem(path\n  /*: string*/\n  ) {\n    delete memMap[path];\n  },\n\n  getAllKeys() {\n    return Object.keys(memMap);\n  },\n\n  clear() {\n    for (const key in memMap) {\n      if (memMap.hasOwnProperty(key)) {\n        delete memMap[key];\n      }\n    }\n  }\n\n};\nmodule.exports = StorageController;"]},"metadata":{},"sourceType":"script"}