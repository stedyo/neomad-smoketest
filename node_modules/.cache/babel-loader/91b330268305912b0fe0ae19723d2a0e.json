{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _CoreManager = _interopRequireDefault(require(\"./CoreManager\"));\n\nvar _isRevocableSession = _interopRequireDefault(require(\"./isRevocableSession\"));\n\nvar _ParseObject = _interopRequireDefault(require(\"./ParseObject\"));\n\nvar _ParseUser = _interopRequireDefault(require(\"./ParseUser\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * Copyright (c) 2015-present, Parse, LLC.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @flow\n */\n\n/**\n * <p>A Parse.Session object is a local representation of a revocable session.\n * This class is a subclass of a Parse.Object, and retains the same\n * functionality of a Parse.Object.</p>\n *\n * @alias Parse.Session\n * @augments Parse.Object\n */\n\n\nclass ParseSession extends _ParseObject.default {\n  /**\n   * @param {object} attributes The initial set of data to store in the user.\n   */\n  constructor(attributes\n  /*: ?AttributeMap*/\n  ) {\n    super('_Session');\n\n    if (attributes && typeof attributes === 'object') {\n      if (!this.set(attributes || {})) {\n        throw new Error(\"Can't create an invalid Session\");\n      }\n    }\n  }\n  /**\n   * Returns the session token string.\n   *\n   * @returns {string}\n   */\n\n\n  getSessionToken()\n  /*: string*/\n  {\n    const token = this.get('sessionToken');\n\n    if (typeof token === 'string') {\n      return token;\n    }\n\n    return '';\n  }\n\n  static readOnlyAttributes() {\n    return ['createdWith', 'expiresAt', 'installationId', 'restricted', 'sessionToken', 'user'];\n  }\n  /**\n   * Retrieves the Session object for the currently logged in session.\n   *\n   * @param {object} options useMasterKey\n   * @static\n   * @returns {Promise} A promise that is resolved with the Parse.Session\n   * object after it has been fetched. If there is no current user, the\n   * promise will be rejected.\n   */\n\n\n  static current(options\n  /*: FullOptions*/\n  ) {\n    options = options || {};\n\n    const controller = _CoreManager.default.getSessionController();\n\n    const sessionOptions = {};\n\n    if (options.hasOwnProperty('useMasterKey')) {\n      sessionOptions.useMasterKey = options.useMasterKey;\n    }\n\n    return _ParseUser.default.currentAsync().then(user => {\n      if (!user) {\n        return Promise.reject('There is no current user.');\n      }\n\n      sessionOptions.sessionToken = user.getSessionToken();\n      return controller.getSession(sessionOptions);\n    });\n  }\n  /**\n   * Determines whether the current session token is revocable.\n   * This method is useful for migrating Express.js or Node.js web apps to\n   * use revocable sessions. If you are migrating an app that uses the Parse\n   * SDK in the browser only, please use Parse.User.enableRevocableSession()\n   * instead, so that sessions can be automatically upgraded.\n   *\n   * @static\n   * @returns {boolean}\n   */\n\n\n  static isCurrentSessionRevocable()\n  /*: boolean*/\n  {\n    const currentUser = _ParseUser.default.current();\n\n    if (currentUser) {\n      return (0, _isRevocableSession.default)(currentUser.getSessionToken() || '');\n    }\n\n    return false;\n  }\n\n}\n\n_ParseObject.default.registerSubclass('_Session', ParseSession);\n\nconst DefaultController = {\n  getSession(options\n  /*: RequestOptions*/\n  )\n  /*: Promise<ParseSession>*/\n  {\n    const RESTController = _CoreManager.default.getRESTController();\n\n    const session = new ParseSession();\n    return RESTController.request('GET', 'sessions/me', {}, options).then(sessionData => {\n      session._finishFetch(sessionData);\n\n      session._setExisted(true);\n\n      return session;\n    });\n  }\n\n};\n\n_CoreManager.default.setSessionController(DefaultController);\n\nvar _default = ParseSession;\nexports.default = _default;","map":{"version":3,"sources":["/Users/szd/Dev/ycomms-smoketest-landing-page/node_modules/parse/lib/node/ParseSession.js"],"names":["Object","defineProperty","exports","value","default","_CoreManager","_interopRequireDefault","require","_isRevocableSession","_ParseObject","_ParseUser","obj","__esModule","ParseSession","constructor","attributes","set","Error","getSessionToken","token","get","readOnlyAttributes","current","options","controller","getSessionController","sessionOptions","hasOwnProperty","useMasterKey","currentAsync","then","user","Promise","reject","sessionToken","getSession","isCurrentSessionRevocable","currentUser","registerSubclass","DefaultController","RESTController","getRESTController","session","request","sessionData","_finishFetch","_setExisted","setSessionController","_default"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;;AAEA,IAAIC,YAAY,GAAGC,sBAAsB,CAACC,OAAO,CAAC,eAAD,CAAR,CAAzC;;AAEA,IAAIC,mBAAmB,GAAGF,sBAAsB,CAACC,OAAO,CAAC,sBAAD,CAAR,CAAhD;;AAEA,IAAIE,YAAY,GAAGH,sBAAsB,CAACC,OAAO,CAAC,eAAD,CAAR,CAAzC;;AAEA,IAAIG,UAAU,GAAGJ,sBAAsB,CAACC,OAAO,CAAC,aAAD,CAAR,CAAvC;;AAEA,SAASD,sBAAT,CAAgCK,GAAhC,EAAqC;AACnC,SAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;AACnCP,IAAAA,OAAO,EAAEO;AAD0B,GAArC;AAGD;AACD;;;;;;;;;;;AAWA;;;;;;;;;;AAUA,MAAME,YAAN,SAA2BJ,YAAY,CAACL,OAAxC,CAAgD;AAC9C;;;AAGAU,EAAAA,WAAW,CAACC;AACZ;AADW,IAET;AACA,UAAM,UAAN;;AAEA,QAAIA,UAAU,IAAI,OAAOA,UAAP,KAAsB,QAAxC,EAAkD;AAChD,UAAI,CAAC,KAAKC,GAAL,CAASD,UAAU,IAAI,EAAvB,CAAL,EAAiC;AAC/B,cAAM,IAAIE,KAAJ,CAAU,iCAAV,CAAN;AACD;AACF;AACF;AACD;;;;;;;AAOAC,EAAAA,eAAe;AACf;AACA;AACE,UAAMC,KAAK,GAAG,KAAKC,GAAL,CAAS,cAAT,CAAd;;AAEA,QAAI,OAAOD,KAAP,KAAiB,QAArB,EAA+B;AAC7B,aAAOA,KAAP;AACD;;AAED,WAAO,EAAP;AACD;;AAED,SAAOE,kBAAP,GAA4B;AAC1B,WAAO,CAAC,aAAD,EAAgB,WAAhB,EAA6B,gBAA7B,EAA+C,YAA/C,EAA6D,cAA7D,EAA6E,MAA7E,CAAP;AACD;AACD;;;;;;;;;;;AAWA,SAAOC,OAAP,CAAeC;AACf;AADA,IAEE;AACAA,IAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;;AAEA,UAAMC,UAAU,GAAGnB,YAAY,CAACD,OAAb,CAAqBqB,oBAArB,EAAnB;;AAEA,UAAMC,cAAc,GAAG,EAAvB;;AAEA,QAAIH,OAAO,CAACI,cAAR,CAAuB,cAAvB,CAAJ,EAA4C;AAC1CD,MAAAA,cAAc,CAACE,YAAf,GAA8BL,OAAO,CAACK,YAAtC;AACD;;AAED,WAAOlB,UAAU,CAACN,OAAX,CAAmByB,YAAnB,GAAkCC,IAAlC,CAAuCC,IAAI,IAAI;AACpD,UAAI,CAACA,IAAL,EAAW;AACT,eAAOC,OAAO,CAACC,MAAR,CAAe,2BAAf,CAAP;AACD;;AAEDP,MAAAA,cAAc,CAACQ,YAAf,GAA8BH,IAAI,CAACb,eAAL,EAA9B;AACA,aAAOM,UAAU,CAACW,UAAX,CAAsBT,cAAtB,CAAP;AACD,KAPM,CAAP;AAQD;AACD;;;;;;;;;;;;AAYA,SAAOU,yBAAP;AACA;AACA;AACE,UAAMC,WAAW,GAAG3B,UAAU,CAACN,OAAX,CAAmBkB,OAAnB,EAApB;;AAEA,QAAIe,WAAJ,EAAiB;AACf,aAAO,CAAC,GAAG7B,mBAAmB,CAACJ,OAAxB,EAAiCiC,WAAW,CAACnB,eAAZ,MAAiC,EAAlE,CAAP;AACD;;AAED,WAAO,KAAP;AACD;;AA5F6C;;AAgGhDT,YAAY,CAACL,OAAb,CAAqBkC,gBAArB,CAAsC,UAAtC,EAAkDzB,YAAlD;;AAEA,MAAM0B,iBAAiB,GAAG;AACxBJ,EAAAA,UAAU,CAACZ;AACX;AADU;AAGV;AACA;AACE,UAAMiB,cAAc,GAAGnC,YAAY,CAACD,OAAb,CAAqBqC,iBAArB,EAAvB;;AAEA,UAAMC,OAAO,GAAG,IAAI7B,YAAJ,EAAhB;AACA,WAAO2B,cAAc,CAACG,OAAf,CAAuB,KAAvB,EAA8B,aAA9B,EAA6C,EAA7C,EAAiDpB,OAAjD,EAA0DO,IAA1D,CAA+Dc,WAAW,IAAI;AACnFF,MAAAA,OAAO,CAACG,YAAR,CAAqBD,WAArB;;AAEAF,MAAAA,OAAO,CAACI,WAAR,CAAoB,IAApB;;AAEA,aAAOJ,OAAP;AACD,KANM,CAAP;AAOD;;AAhBuB,CAA1B;;AAoBArC,YAAY,CAACD,OAAb,CAAqB2C,oBAArB,CAA0CR,iBAA1C;;AAEA,IAAIS,QAAQ,GAAGnC,YAAf;AACAX,OAAO,CAACE,OAAR,GAAkB4C,QAAlB","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _CoreManager = _interopRequireDefault(require(\"./CoreManager\"));\n\nvar _isRevocableSession = _interopRequireDefault(require(\"./isRevocableSession\"));\n\nvar _ParseObject = _interopRequireDefault(require(\"./ParseObject\"));\n\nvar _ParseUser = _interopRequireDefault(require(\"./ParseUser\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * Copyright (c) 2015-present, Parse, LLC.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @flow\n */\n\n/**\n * <p>A Parse.Session object is a local representation of a revocable session.\n * This class is a subclass of a Parse.Object, and retains the same\n * functionality of a Parse.Object.</p>\n *\n * @alias Parse.Session\n * @augments Parse.Object\n */\n\n\nclass ParseSession extends _ParseObject.default {\n  /**\n   * @param {object} attributes The initial set of data to store in the user.\n   */\n  constructor(attributes\n  /*: ?AttributeMap*/\n  ) {\n    super('_Session');\n\n    if (attributes && typeof attributes === 'object') {\n      if (!this.set(attributes || {})) {\n        throw new Error(\"Can't create an invalid Session\");\n      }\n    }\n  }\n  /**\n   * Returns the session token string.\n   *\n   * @returns {string}\n   */\n\n\n  getSessionToken()\n  /*: string*/\n  {\n    const token = this.get('sessionToken');\n\n    if (typeof token === 'string') {\n      return token;\n    }\n\n    return '';\n  }\n\n  static readOnlyAttributes() {\n    return ['createdWith', 'expiresAt', 'installationId', 'restricted', 'sessionToken', 'user'];\n  }\n  /**\n   * Retrieves the Session object for the currently logged in session.\n   *\n   * @param {object} options useMasterKey\n   * @static\n   * @returns {Promise} A promise that is resolved with the Parse.Session\n   * object after it has been fetched. If there is no current user, the\n   * promise will be rejected.\n   */\n\n\n  static current(options\n  /*: FullOptions*/\n  ) {\n    options = options || {};\n\n    const controller = _CoreManager.default.getSessionController();\n\n    const sessionOptions = {};\n\n    if (options.hasOwnProperty('useMasterKey')) {\n      sessionOptions.useMasterKey = options.useMasterKey;\n    }\n\n    return _ParseUser.default.currentAsync().then(user => {\n      if (!user) {\n        return Promise.reject('There is no current user.');\n      }\n\n      sessionOptions.sessionToken = user.getSessionToken();\n      return controller.getSession(sessionOptions);\n    });\n  }\n  /**\n   * Determines whether the current session token is revocable.\n   * This method is useful for migrating Express.js or Node.js web apps to\n   * use revocable sessions. If you are migrating an app that uses the Parse\n   * SDK in the browser only, please use Parse.User.enableRevocableSession()\n   * instead, so that sessions can be automatically upgraded.\n   *\n   * @static\n   * @returns {boolean}\n   */\n\n\n  static isCurrentSessionRevocable()\n  /*: boolean*/\n  {\n    const currentUser = _ParseUser.default.current();\n\n    if (currentUser) {\n      return (0, _isRevocableSession.default)(currentUser.getSessionToken() || '');\n    }\n\n    return false;\n  }\n\n}\n\n_ParseObject.default.registerSubclass('_Session', ParseSession);\n\nconst DefaultController = {\n  getSession(options\n  /*: RequestOptions*/\n  )\n  /*: Promise<ParseSession>*/\n  {\n    const RESTController = _CoreManager.default.getRESTController();\n\n    const session = new ParseSession();\n    return RESTController.request('GET', 'sessions/me', {}, options).then(sessionData => {\n      session._finishFetch(sessionData);\n\n      session._setExisted(true);\n\n      return session;\n    });\n  }\n\n};\n\n_CoreManager.default.setSessionController(DefaultController);\n\nvar _default = ParseSession;\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}