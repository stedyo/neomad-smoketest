{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.track = track;\n\nvar _CoreManager = _interopRequireDefault(require(\"./CoreManager\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * Copyright (c) 2015-present, Parse, LLC.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @flow\n */\n\n/**\n * Parse.Analytics provides an interface to Parse's logging and analytics\n * backend.\n *\n * @class Parse.Analytics\n * @static\n * @hideconstructor\n */\n\n/**\n * Tracks the occurrence of a custom event with additional dimensions.\n * Parse will store a data point at the time of invocation with the given\n * event name.\n *\n * Dimensions will allow segmentation of the occurrences of this custom\n * event. Keys and values should be {@code String}s, and will throw\n * otherwise.\n *\n * To track a user signup along with additional metadata, consider the\n * following:\n * <pre>\n * var dimensions = {\n *  gender: 'm',\n *  source: 'web',\n *  dayType: 'weekend'\n * };\n * Parse.Analytics.track('signup', dimensions);\n * </pre>\n *\n * There is a default limit of 8 dimensions per event tracked.\n *\n * @function track\n * @name Parse.Analytics.track\n * @param {string} name The name of the custom event to report to Parse as\n * having happened.\n * @param {object} dimensions The dictionary of information by which to\n * segment this event.\n * @returns {Promise} A promise that is resolved when the round-trip\n * to the server completes.\n */\n\n\nfunction track(name\n/*: string*/\n, dimensions\n/*: { [key: string]: string }*/\n)\n/*: Promise*/\n{\n  name = name || '';\n  name = name.replace(/^\\s*/, '');\n  name = name.replace(/\\s*$/, '');\n\n  if (name.length === 0) {\n    throw new TypeError('A name for the custom event must be provided');\n  }\n\n  for (const key in dimensions) {\n    if (typeof key !== 'string' || typeof dimensions[key] !== 'string') {\n      throw new TypeError('track() dimensions expects keys and values of type \"string\".');\n    }\n  }\n\n  return _CoreManager.default.getAnalyticsController().track(name, dimensions);\n}\n\nconst DefaultController = {\n  track(name, dimensions) {\n    const RESTController = _CoreManager.default.getRESTController();\n\n    return RESTController.request('POST', 'events/' + name, {\n      dimensions: dimensions\n    });\n  }\n\n};\n\n_CoreManager.default.setAnalyticsController(DefaultController);","map":{"version":3,"sources":["/Users/szd/Dev/ycomms-smoketest-landing-page/node_modules/parse/lib/node/Analytics.js"],"names":["Object","defineProperty","exports","value","track","_CoreManager","_interopRequireDefault","require","obj","__esModule","default","name","dimensions","replace","length","TypeError","key","getAnalyticsController","DefaultController","RESTController","getRESTController","request","setAnalyticsController"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,KAAR,GAAgBA,KAAhB;;AAEA,IAAIC,YAAY,GAAGC,sBAAsB,CAACC,OAAO,CAAC,eAAD,CAAR,CAAzC;;AAEA,SAASD,sBAAT,CAAgCE,GAAhC,EAAqC;AACnC,SAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;AACnCE,IAAAA,OAAO,EAAEF;AAD0B,GAArC;AAGD;AACD;;;;;;;;;;;AAWA;;;;;;;;;AASA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiCA,SAASJ,KAAT,CAAeO;AACf;AADA,EAEEC;AACF;AAHA;AAKA;AACA;AACED,EAAAA,IAAI,GAAGA,IAAI,IAAI,EAAf;AACAA,EAAAA,IAAI,GAAGA,IAAI,CAACE,OAAL,CAAa,MAAb,EAAqB,EAArB,CAAP;AACAF,EAAAA,IAAI,GAAGA,IAAI,CAACE,OAAL,CAAa,MAAb,EAAqB,EAArB,CAAP;;AAEA,MAAIF,IAAI,CAACG,MAAL,KAAgB,CAApB,EAAuB;AACrB,UAAM,IAAIC,SAAJ,CAAc,8CAAd,CAAN;AACD;;AAED,OAAK,MAAMC,GAAX,IAAkBJ,UAAlB,EAA8B;AAC5B,QAAI,OAAOI,GAAP,KAAe,QAAf,IAA2B,OAAOJ,UAAU,CAACI,GAAD,CAAjB,KAA2B,QAA1D,EAAoE;AAClE,YAAM,IAAID,SAAJ,CAAc,8DAAd,CAAN;AACD;AACF;;AAED,SAAOV,YAAY,CAACK,OAAb,CAAqBO,sBAArB,GAA8Cb,KAA9C,CAAoDO,IAApD,EAA0DC,UAA1D,CAAP;AACD;;AAED,MAAMM,iBAAiB,GAAG;AACxBd,EAAAA,KAAK,CAACO,IAAD,EAAOC,UAAP,EAAmB;AACtB,UAAMO,cAAc,GAAGd,YAAY,CAACK,OAAb,CAAqBU,iBAArB,EAAvB;;AAEA,WAAOD,cAAc,CAACE,OAAf,CAAuB,MAAvB,EAA+B,YAAYV,IAA3C,EAAiD;AACtDC,MAAAA,UAAU,EAAEA;AAD0C,KAAjD,CAAP;AAGD;;AAPuB,CAA1B;;AAWAP,YAAY,CAACK,OAAb,CAAqBY,sBAArB,CAA4CJ,iBAA5C","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.track = track;\n\nvar _CoreManager = _interopRequireDefault(require(\"./CoreManager\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * Copyright (c) 2015-present, Parse, LLC.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @flow\n */\n\n/**\n * Parse.Analytics provides an interface to Parse's logging and analytics\n * backend.\n *\n * @class Parse.Analytics\n * @static\n * @hideconstructor\n */\n\n/**\n * Tracks the occurrence of a custom event with additional dimensions.\n * Parse will store a data point at the time of invocation with the given\n * event name.\n *\n * Dimensions will allow segmentation of the occurrences of this custom\n * event. Keys and values should be {@code String}s, and will throw\n * otherwise.\n *\n * To track a user signup along with additional metadata, consider the\n * following:\n * <pre>\n * var dimensions = {\n *  gender: 'm',\n *  source: 'web',\n *  dayType: 'weekend'\n * };\n * Parse.Analytics.track('signup', dimensions);\n * </pre>\n *\n * There is a default limit of 8 dimensions per event tracked.\n *\n * @function track\n * @name Parse.Analytics.track\n * @param {string} name The name of the custom event to report to Parse as\n * having happened.\n * @param {object} dimensions The dictionary of information by which to\n * segment this event.\n * @returns {Promise} A promise that is resolved when the round-trip\n * to the server completes.\n */\n\n\nfunction track(name\n/*: string*/\n, dimensions\n/*: { [key: string]: string }*/\n)\n/*: Promise*/\n{\n  name = name || '';\n  name = name.replace(/^\\s*/, '');\n  name = name.replace(/\\s*$/, '');\n\n  if (name.length === 0) {\n    throw new TypeError('A name for the custom event must be provided');\n  }\n\n  for (const key in dimensions) {\n    if (typeof key !== 'string' || typeof dimensions[key] !== 'string') {\n      throw new TypeError('track() dimensions expects keys and values of type \"string\".');\n    }\n  }\n\n  return _CoreManager.default.getAnalyticsController().track(name, dimensions);\n}\n\nconst DefaultController = {\n  track(name, dimensions) {\n    const RESTController = _CoreManager.default.getRESTController();\n\n    return RESTController.request('POST', 'events/' + name, {\n      dimensions: dimensions\n    });\n  }\n\n};\n\n_CoreManager.default.setAnalyticsController(DefaultController);"]},"metadata":{},"sourceType":"script"}