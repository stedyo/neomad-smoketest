{"ast":null,"code":"\"use strict\";\n/*\n * Copyright (c) 2015-present, Parse, LLC.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @flow\n */\n\n/*:: import type { AttributeMap, ObjectCache, OpsMap, State } from './ObjectStateMutations';*/\n\n/*:: import type ParseFile from './ParseFile';*/\n\n/*:: import type { FileSource } from './ParseFile';*/\n\n/*:: import type { Op } from './ParseOp';*/\n\n/*:: import type ParseObject from './ParseObject';*/\n\n/*:: import type { QueryJSON } from './ParseQuery';*/\n\n/*:: import type ParseUser from './ParseUser';*/\n\n/*:: import type { AuthData } from './ParseUser';*/\n\n/*:: import type { PushData } from './Push';*/\n\n/*:: import type { RequestOptions, FullOptions } from './RESTController';*/\n\n/*:: type AnalyticsController = {\n  track: (name: string, dimensions: { [key: string]: string }) => Promise,\n};*/\n\n/*:: type CloudController = {\n  run: (name: string, data: mixed, options: RequestOptions) => Promise,\n  getJobsData: (options: RequestOptions) => Promise,\n  startJob: (name: string, data: mixed, options: RequestOptions) => Promise,\n};*/\n\n/*:: type ConfigController = {\n  current: () => Promise,\n  get: () => Promise,\n  save: (attrs: { [key: string]: any }) => Promise,\n};*/\n\n/*:: type CryptoController = {\n  encrypt: (obj: any, secretKey: string) => string,\n  decrypt: (encryptedText: string, secretKey: any) => string,\n};*/\n\n/*:: type FileController = {\n  saveFile: (name: string, source: FileSource, options: FullOptions) => Promise,\n  saveBase64: (name: string, source: FileSource, options: FullOptions) => Promise,\n  download: (uri: string) => Promise,\n};*/\n\n/*:: type InstallationController = {\n  currentInstallationId: () => Promise,\n};*/\n\n/*:: type ObjectController = {\n  fetch: (\n    object: ParseObject | Array<ParseObject>,\n    forceFetch: boolean,\n    options: RequestOptions\n  ) => Promise,\n  save: (object: ParseObject | Array<ParseObject | ParseFile>, options: RequestOptions) => Promise,\n  destroy: (object: ParseObject | Array<ParseObject>, options: RequestOptions) => Promise,\n};*/\n\n/*:: type ObjectStateController = {\n  getState: (obj: any) => ?State,\n  initializeState: (obj: any, initial?: State) => State,\n  removeState: (obj: any) => ?State,\n  getServerData: (obj: any) => AttributeMap,\n  setServerData: (obj: any, attributes: AttributeMap) => void,\n  getPendingOps: (obj: any) => Array<OpsMap>,\n  setPendingOp: (obj: any, attr: string, op: ?Op) => void,\n  pushPendingState: (obj: any) => void,\n  popPendingState: (obj: any) => OpsMap,\n  mergeFirstPendingState: (obj: any) => void,\n  getObjectCache: (obj: any) => ObjectCache,\n  estimateAttribute: (obj: any, attr: string) => mixed,\n  estimateAttributes: (obj: any) => AttributeMap,\n  commitServerChanges: (obj: any, changes: AttributeMap) => void,\n  enqueueTask: (obj: any, task: () => Promise) => Promise,\n  clearAllState: () => void,\n  duplicateState: (source: any, dest: any) => void,\n};*/\n\n/*:: type PushController = {\n  send: (data: PushData) => Promise,\n};*/\n\n/*:: type QueryController = {\n  find: (className: string, params: QueryJSON, options: RequestOptions) => Promise,\n  aggregate: (className: string, params: any, options: RequestOptions) => Promise,\n};*/\n\n/*:: type RESTController = {\n  request: (method: string, path: string, data: mixed, options: RequestOptions) => Promise,\n  ajax: (method: string, url: string, data: any, headers?: any, options: FullOptions) => Promise,\n};*/\n\n/*:: type SchemaController = {\n  purge: (className: string) => Promise,\n  get: (className: string, options: RequestOptions) => Promise,\n  delete: (className: string, options: RequestOptions) => Promise,\n  create: (className: string, params: any, options: RequestOptions) => Promise,\n  update: (className: string, params: any, options: RequestOptions) => Promise,\n  send(className: string, method: string, params: any, options: RequestOptions): Promise,\n};*/\n\n/*:: type SessionController = {\n  getSession: (token: RequestOptions) => Promise,\n};*/\n\n/*:: type StorageController =\n  | {\n      async: 0,\n      getItem: (path: string) => ?string,\n      setItem: (path: string, value: string) => void,\n      removeItem: (path: string) => void,\n      getItemAsync?: (path: string) => Promise,\n      setItemAsync?: (path: string, value: string) => Promise,\n      removeItemAsync?: (path: string) => Promise,\n      clear: () => void,\n    }\n  | {\n      async: 1,\n      getItem?: (path: string) => ?string,\n      setItem?: (path: string, value: string) => void,\n      removeItem?: (path: string) => void,\n      getItemAsync: (path: string) => Promise,\n      setItemAsync: (path: string, value: string) => Promise,\n      removeItemAsync: (path: string) => Promise,\n      clear: () => void,\n    };*/\n\n/*:: type LocalDatastoreController = {\n  fromPinWithName: (name: string) => ?any,\n  pinWithName: (name: string, objects: any) => void,\n  unPinWithName: (name: string) => void,\n  getAllContents: () => ?any,\n  clear: () => void,\n};*/\n\n/*:: type UserController = {\n  setCurrentUser: (user: ParseUser) => Promise,\n  currentUser: () => ?ParseUser,\n  currentUserAsync: () => Promise,\n  signUp: (user: ParseUser, attrs: AttributeMap, options: RequestOptions) => Promise,\n  logIn: (user: ParseUser, options: RequestOptions) => Promise,\n  become: (options: RequestOptions) => Promise,\n  hydrate: (userJSON: AttributeMap) => Promise,\n  logOut: (options: RequestOptions) => Promise,\n  me: (options: RequestOptions) => Promise,\n  requestPasswordReset: (email: string, options: RequestOptions) => Promise,\n  updateUserOnDisk: (user: ParseUser) => Promise,\n  upgradeToRevocableSession: (user: ParseUser, options: RequestOptions) => Promise,\n  linkWith: (user: ParseUser, authData: AuthData) => Promise,\n  removeUserFromDisk: () => Promise,\n  verifyPassword: (username: string, password: string, options: RequestOptions) => Promise,\n  requestEmailVerification: (email: string, options: RequestOptions) => Promise,\n};*/\n\n/*:: type HooksController = {\n  get: (type: string, functionName?: string, triggerName?: string) => Promise,\n  create: (hook: mixed) => Promise,\n  delete: (hook: mixed) => Promise,\n  update: (hook: mixed) => Promise,\n  send: (method: string, path: string, body?: mixed) => Promise,\n};*/\n\n/*:: type WebSocketController = {\n  onopen: () => void,\n  onmessage: (message: any) => void,\n  onclose: () => void,\n  onerror: (error: any) => void,\n  send: (data: any) => void,\n  close: () => void,\n};*/\n\n/*:: type Config = {\n  AnalyticsController?: AnalyticsController,\n  CloudController?: CloudController,\n  ConfigController?: ConfigController,\n  FileController?: FileController,\n  InstallationController?: InstallationController,\n  ObjectController?: ObjectController,\n  ObjectStateController?: ObjectStateController,\n  PushController?: PushController,\n  QueryController?: QueryController,\n  RESTController?: RESTController,\n  SchemaController?: SchemaController,\n  SessionController?: SessionController,\n  StorageController?: StorageController,\n  LocalDatastoreController?: LocalDatastoreController,\n  UserController?: UserController,\n  HooksController?: HooksController,\n  WebSocketController?: WebSocketController,\n};*/\n\nconst config\n/*: Config & { [key: string]: mixed }*/\n= {\n  // Defaults\n  IS_NODE: typeof process !== 'undefined' && !!process.versions && !!process.versions.node && !process.versions.electron,\n  REQUEST_ATTEMPT_LIMIT: 5,\n  REQUEST_BATCH_SIZE: 20,\n  REQUEST_HEADERS: {},\n  SERVER_URL: 'https://api.parse.com/1',\n  SERVER_AUTH_TYPE: null,\n  SERVER_AUTH_TOKEN: null,\n  LIVEQUERY_SERVER_URL: null,\n  ENCRYPTED_KEY: null,\n  VERSION: 'js' + \"3.4.2\",\n  APPLICATION_ID: null,\n  JAVASCRIPT_KEY: null,\n  MASTER_KEY: null,\n  USE_MASTER_KEY: false,\n  PERFORM_USER_REWRITE: true,\n  FORCE_REVOCABLE_SESSION: false,\n  ENCRYPTED_USER: false,\n  IDEMPOTENCY: false,\n  ALLOW_CUSTOM_OBJECT_ID: false\n};\n\nfunction requireMethods(name\n/*: string*/\n, methods\n/*: Array<string>*/\n, controller\n/*: any*/\n) {\n  methods.forEach(func => {\n    if (typeof controller[func] !== 'function') {\n      throw new Error(`${name} must implement ${func}()`);\n    }\n  });\n}\n\nmodule.exports = {\n  get: function (key\n  /*: string*/\n  )\n  /*: any*/\n  {\n    if (config.hasOwnProperty(key)) {\n      return config[key];\n    }\n\n    throw new Error('Configuration key not found: ' + key);\n  },\n  set: function (key\n  /*: string*/\n  , value\n  /*: any*/\n  )\n  /*: void*/\n  {\n    config[key] = value;\n  },\n\n  /* Specialized Controller Setters/Getters */\n  setAnalyticsController(controller\n  /*: AnalyticsController*/\n  ) {\n    requireMethods('AnalyticsController', ['track'], controller);\n    config['AnalyticsController'] = controller;\n  },\n\n  getAnalyticsController()\n  /*: AnalyticsController*/\n  {\n    return config['AnalyticsController'];\n  },\n\n  setCloudController(controller\n  /*: CloudController*/\n  ) {\n    requireMethods('CloudController', ['run', 'getJobsData', 'startJob'], controller);\n    config['CloudController'] = controller;\n  },\n\n  getCloudController()\n  /*: CloudController*/\n  {\n    return config['CloudController'];\n  },\n\n  setConfigController(controller\n  /*: ConfigController*/\n  ) {\n    requireMethods('ConfigController', ['current', 'get', 'save'], controller);\n    config['ConfigController'] = controller;\n  },\n\n  getConfigController()\n  /*: ConfigController*/\n  {\n    return config['ConfigController'];\n  },\n\n  setCryptoController(controller\n  /*: CryptoController*/\n  ) {\n    requireMethods('CryptoController', ['encrypt', 'decrypt'], controller);\n    config['CryptoController'] = controller;\n  },\n\n  getCryptoController()\n  /*: CryptoController*/\n  {\n    return config['CryptoController'];\n  },\n\n  setFileController(controller\n  /*: FileController*/\n  ) {\n    requireMethods('FileController', ['saveFile', 'saveBase64'], controller);\n    config['FileController'] = controller;\n  },\n\n  getFileController()\n  /*: FileController*/\n  {\n    return config['FileController'];\n  },\n\n  setInstallationController(controller\n  /*: InstallationController*/\n  ) {\n    requireMethods('InstallationController', ['currentInstallationId'], controller);\n    config['InstallationController'] = controller;\n  },\n\n  getInstallationController()\n  /*: InstallationController*/\n  {\n    return config['InstallationController'];\n  },\n\n  setObjectController(controller\n  /*: ObjectController*/\n  ) {\n    requireMethods('ObjectController', ['save', 'fetch', 'destroy'], controller);\n    config['ObjectController'] = controller;\n  },\n\n  getObjectController()\n  /*: ObjectController*/\n  {\n    return config['ObjectController'];\n  },\n\n  setObjectStateController(controller\n  /*: ObjectStateController*/\n  ) {\n    requireMethods('ObjectStateController', ['getState', 'initializeState', 'removeState', 'getServerData', 'setServerData', 'getPendingOps', 'setPendingOp', 'pushPendingState', 'popPendingState', 'mergeFirstPendingState', 'getObjectCache', 'estimateAttribute', 'estimateAttributes', 'commitServerChanges', 'enqueueTask', 'clearAllState'], controller);\n    config['ObjectStateController'] = controller;\n  },\n\n  getObjectStateController()\n  /*: ObjectStateController*/\n  {\n    return config['ObjectStateController'];\n  },\n\n  setPushController(controller\n  /*: PushController*/\n  ) {\n    requireMethods('PushController', ['send'], controller);\n    config['PushController'] = controller;\n  },\n\n  getPushController()\n  /*: PushController*/\n  {\n    return config['PushController'];\n  },\n\n  setQueryController(controller\n  /*: QueryController*/\n  ) {\n    requireMethods('QueryController', ['find', 'aggregate'], controller);\n    config['QueryController'] = controller;\n  },\n\n  getQueryController()\n  /*: QueryController*/\n  {\n    return config['QueryController'];\n  },\n\n  setRESTController(controller\n  /*: RESTController*/\n  ) {\n    requireMethods('RESTController', ['request', 'ajax'], controller);\n    config['RESTController'] = controller;\n  },\n\n  getRESTController()\n  /*: RESTController*/\n  {\n    return config['RESTController'];\n  },\n\n  setSchemaController(controller\n  /*: SchemaController*/\n  ) {\n    requireMethods('SchemaController', ['get', 'create', 'update', 'delete', 'send', 'purge'], controller);\n    config['SchemaController'] = controller;\n  },\n\n  getSchemaController()\n  /*: SchemaController*/\n  {\n    return config['SchemaController'];\n  },\n\n  setSessionController(controller\n  /*: SessionController*/\n  ) {\n    requireMethods('SessionController', ['getSession'], controller);\n    config['SessionController'] = controller;\n  },\n\n  getSessionController()\n  /*: SessionController*/\n  {\n    return config['SessionController'];\n  },\n\n  setStorageController(controller\n  /*: StorageController*/\n  ) {\n    if (controller.async) {\n      requireMethods('An async StorageController', ['getItemAsync', 'setItemAsync', 'removeItemAsync', 'getAllKeysAsync'], controller);\n    } else {\n      requireMethods('A synchronous StorageController', ['getItem', 'setItem', 'removeItem', 'getAllKeys'], controller);\n    }\n\n    config['StorageController'] = controller;\n  },\n\n  setLocalDatastoreController(controller\n  /*: LocalDatastoreController*/\n  ) {\n    requireMethods('LocalDatastoreController', ['pinWithName', 'fromPinWithName', 'unPinWithName', 'getAllContents', 'clear'], controller);\n    config['LocalDatastoreController'] = controller;\n  },\n\n  getLocalDatastoreController()\n  /*: LocalDatastoreController*/\n  {\n    return config['LocalDatastoreController'];\n  },\n\n  setLocalDatastore(store\n  /*: any*/\n  ) {\n    config['LocalDatastore'] = store;\n  },\n\n  getLocalDatastore() {\n    return config['LocalDatastore'];\n  },\n\n  getStorageController()\n  /*: StorageController*/\n  {\n    return config['StorageController'];\n  },\n\n  setAsyncStorage(storage\n  /*: any*/\n  ) {\n    config['AsyncStorage'] = storage;\n  },\n\n  getAsyncStorage() {\n    return config['AsyncStorage'];\n  },\n\n  setWebSocketController(controller\n  /*: WebSocketController*/\n  ) {\n    config['WebSocketController'] = controller;\n  },\n\n  getWebSocketController()\n  /*: WebSocketController*/\n  {\n    return config['WebSocketController'];\n  },\n\n  setUserController(controller\n  /*: UserController*/\n  ) {\n    requireMethods('UserController', ['setCurrentUser', 'currentUser', 'currentUserAsync', 'signUp', 'logIn', 'become', 'logOut', 'me', 'requestPasswordReset', 'upgradeToRevocableSession', 'requestEmailVerification', 'verifyPassword', 'linkWith'], controller);\n    config['UserController'] = controller;\n  },\n\n  getUserController()\n  /*: UserController*/\n  {\n    return config['UserController'];\n  },\n\n  setLiveQueryController(controller\n  /*: any*/\n  ) {\n    requireMethods('LiveQueryController', ['setDefaultLiveQueryClient', 'getDefaultLiveQueryClient', '_clearCachedDefaultClient'], controller);\n    config['LiveQueryController'] = controller;\n  },\n\n  getLiveQueryController()\n  /*: any*/\n  {\n    return config['LiveQueryController'];\n  },\n\n  setHooksController(controller\n  /*: HooksController*/\n  ) {\n    requireMethods('HooksController', ['create', 'get', 'update', 'remove'], controller);\n    config['HooksController'] = controller;\n  },\n\n  getHooksController()\n  /*: HooksController*/\n  {\n    return config['HooksController'];\n  }\n\n};","map":{"version":3,"sources":["/Users/szd/Dev/ycomms-smoketest-landing-page/node_modules/parse/lib/node/CoreManager.js"],"names":["config","IS_NODE","process","versions","node","electron","REQUEST_ATTEMPT_LIMIT","REQUEST_BATCH_SIZE","REQUEST_HEADERS","SERVER_URL","SERVER_AUTH_TYPE","SERVER_AUTH_TOKEN","LIVEQUERY_SERVER_URL","ENCRYPTED_KEY","VERSION","APPLICATION_ID","JAVASCRIPT_KEY","MASTER_KEY","USE_MASTER_KEY","PERFORM_USER_REWRITE","FORCE_REVOCABLE_SESSION","ENCRYPTED_USER","IDEMPOTENCY","ALLOW_CUSTOM_OBJECT_ID","requireMethods","name","methods","controller","forEach","func","Error","module","exports","get","key","hasOwnProperty","set","value","setAnalyticsController","getAnalyticsController","setCloudController","getCloudController","setConfigController","getConfigController","setCryptoController","getCryptoController","setFileController","getFileController","setInstallationController","getInstallationController","setObjectController","getObjectController","setObjectStateController","getObjectStateController","setPushController","getPushController","setQueryController","getQueryController","setRESTController","getRESTController","setSchemaController","getSchemaController","setSessionController","getSessionController","setStorageController","async","setLocalDatastoreController","getLocalDatastoreController","setLocalDatastore","store","getLocalDatastore","getStorageController","setAsyncStorage","storage","getAsyncStorage","setWebSocketController","getWebSocketController","setUserController","getUserController","setLiveQueryController","getLiveQueryController","setHooksController","getHooksController"],"mappings":"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","sourcesContent":["\"use strict\";\n/*\n * Copyright (c) 2015-present, Parse, LLC.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @flow\n */\n\n/*:: import type { AttributeMap, ObjectCache, OpsMap, State } from './ObjectStateMutations';*/\n\n/*:: import type ParseFile from './ParseFile';*/\n\n/*:: import type { FileSource } from './ParseFile';*/\n\n/*:: import type { Op } from './ParseOp';*/\n\n/*:: import type ParseObject from './ParseObject';*/\n\n/*:: import type { QueryJSON } from './ParseQuery';*/\n\n/*:: import type ParseUser from './ParseUser';*/\n\n/*:: import type { AuthData } from './ParseUser';*/\n\n/*:: import type { PushData } from './Push';*/\n\n/*:: import type { RequestOptions, FullOptions } from './RESTController';*/\n\n/*:: type AnalyticsController = {\n  track: (name: string, dimensions: { [key: string]: string }) => Promise,\n};*/\n\n/*:: type CloudController = {\n  run: (name: string, data: mixed, options: RequestOptions) => Promise,\n  getJobsData: (options: RequestOptions) => Promise,\n  startJob: (name: string, data: mixed, options: RequestOptions) => Promise,\n};*/\n\n/*:: type ConfigController = {\n  current: () => Promise,\n  get: () => Promise,\n  save: (attrs: { [key: string]: any }) => Promise,\n};*/\n\n/*:: type CryptoController = {\n  encrypt: (obj: any, secretKey: string) => string,\n  decrypt: (encryptedText: string, secretKey: any) => string,\n};*/\n\n/*:: type FileController = {\n  saveFile: (name: string, source: FileSource, options: FullOptions) => Promise,\n  saveBase64: (name: string, source: FileSource, options: FullOptions) => Promise,\n  download: (uri: string) => Promise,\n};*/\n\n/*:: type InstallationController = {\n  currentInstallationId: () => Promise,\n};*/\n\n/*:: type ObjectController = {\n  fetch: (\n    object: ParseObject | Array<ParseObject>,\n    forceFetch: boolean,\n    options: RequestOptions\n  ) => Promise,\n  save: (object: ParseObject | Array<ParseObject | ParseFile>, options: RequestOptions) => Promise,\n  destroy: (object: ParseObject | Array<ParseObject>, options: RequestOptions) => Promise,\n};*/\n\n/*:: type ObjectStateController = {\n  getState: (obj: any) => ?State,\n  initializeState: (obj: any, initial?: State) => State,\n  removeState: (obj: any) => ?State,\n  getServerData: (obj: any) => AttributeMap,\n  setServerData: (obj: any, attributes: AttributeMap) => void,\n  getPendingOps: (obj: any) => Array<OpsMap>,\n  setPendingOp: (obj: any, attr: string, op: ?Op) => void,\n  pushPendingState: (obj: any) => void,\n  popPendingState: (obj: any) => OpsMap,\n  mergeFirstPendingState: (obj: any) => void,\n  getObjectCache: (obj: any) => ObjectCache,\n  estimateAttribute: (obj: any, attr: string) => mixed,\n  estimateAttributes: (obj: any) => AttributeMap,\n  commitServerChanges: (obj: any, changes: AttributeMap) => void,\n  enqueueTask: (obj: any, task: () => Promise) => Promise,\n  clearAllState: () => void,\n  duplicateState: (source: any, dest: any) => void,\n};*/\n\n/*:: type PushController = {\n  send: (data: PushData) => Promise,\n};*/\n\n/*:: type QueryController = {\n  find: (className: string, params: QueryJSON, options: RequestOptions) => Promise,\n  aggregate: (className: string, params: any, options: RequestOptions) => Promise,\n};*/\n\n/*:: type RESTController = {\n  request: (method: string, path: string, data: mixed, options: RequestOptions) => Promise,\n  ajax: (method: string, url: string, data: any, headers?: any, options: FullOptions) => Promise,\n};*/\n\n/*:: type SchemaController = {\n  purge: (className: string) => Promise,\n  get: (className: string, options: RequestOptions) => Promise,\n  delete: (className: string, options: RequestOptions) => Promise,\n  create: (className: string, params: any, options: RequestOptions) => Promise,\n  update: (className: string, params: any, options: RequestOptions) => Promise,\n  send(className: string, method: string, params: any, options: RequestOptions): Promise,\n};*/\n\n/*:: type SessionController = {\n  getSession: (token: RequestOptions) => Promise,\n};*/\n\n/*:: type StorageController =\n  | {\n      async: 0,\n      getItem: (path: string) => ?string,\n      setItem: (path: string, value: string) => void,\n      removeItem: (path: string) => void,\n      getItemAsync?: (path: string) => Promise,\n      setItemAsync?: (path: string, value: string) => Promise,\n      removeItemAsync?: (path: string) => Promise,\n      clear: () => void,\n    }\n  | {\n      async: 1,\n      getItem?: (path: string) => ?string,\n      setItem?: (path: string, value: string) => void,\n      removeItem?: (path: string) => void,\n      getItemAsync: (path: string) => Promise,\n      setItemAsync: (path: string, value: string) => Promise,\n      removeItemAsync: (path: string) => Promise,\n      clear: () => void,\n    };*/\n\n/*:: type LocalDatastoreController = {\n  fromPinWithName: (name: string) => ?any,\n  pinWithName: (name: string, objects: any) => void,\n  unPinWithName: (name: string) => void,\n  getAllContents: () => ?any,\n  clear: () => void,\n};*/\n\n/*:: type UserController = {\n  setCurrentUser: (user: ParseUser) => Promise,\n  currentUser: () => ?ParseUser,\n  currentUserAsync: () => Promise,\n  signUp: (user: ParseUser, attrs: AttributeMap, options: RequestOptions) => Promise,\n  logIn: (user: ParseUser, options: RequestOptions) => Promise,\n  become: (options: RequestOptions) => Promise,\n  hydrate: (userJSON: AttributeMap) => Promise,\n  logOut: (options: RequestOptions) => Promise,\n  me: (options: RequestOptions) => Promise,\n  requestPasswordReset: (email: string, options: RequestOptions) => Promise,\n  updateUserOnDisk: (user: ParseUser) => Promise,\n  upgradeToRevocableSession: (user: ParseUser, options: RequestOptions) => Promise,\n  linkWith: (user: ParseUser, authData: AuthData) => Promise,\n  removeUserFromDisk: () => Promise,\n  verifyPassword: (username: string, password: string, options: RequestOptions) => Promise,\n  requestEmailVerification: (email: string, options: RequestOptions) => Promise,\n};*/\n\n/*:: type HooksController = {\n  get: (type: string, functionName?: string, triggerName?: string) => Promise,\n  create: (hook: mixed) => Promise,\n  delete: (hook: mixed) => Promise,\n  update: (hook: mixed) => Promise,\n  send: (method: string, path: string, body?: mixed) => Promise,\n};*/\n\n/*:: type WebSocketController = {\n  onopen: () => void,\n  onmessage: (message: any) => void,\n  onclose: () => void,\n  onerror: (error: any) => void,\n  send: (data: any) => void,\n  close: () => void,\n};*/\n\n/*:: type Config = {\n  AnalyticsController?: AnalyticsController,\n  CloudController?: CloudController,\n  ConfigController?: ConfigController,\n  FileController?: FileController,\n  InstallationController?: InstallationController,\n  ObjectController?: ObjectController,\n  ObjectStateController?: ObjectStateController,\n  PushController?: PushController,\n  QueryController?: QueryController,\n  RESTController?: RESTController,\n  SchemaController?: SchemaController,\n  SessionController?: SessionController,\n  StorageController?: StorageController,\n  LocalDatastoreController?: LocalDatastoreController,\n  UserController?: UserController,\n  HooksController?: HooksController,\n  WebSocketController?: WebSocketController,\n};*/\n\nconst config\n/*: Config & { [key: string]: mixed }*/\n= {\n  // Defaults\n  IS_NODE: typeof process !== 'undefined' && !!process.versions && !!process.versions.node && !process.versions.electron,\n  REQUEST_ATTEMPT_LIMIT: 5,\n  REQUEST_BATCH_SIZE: 20,\n  REQUEST_HEADERS: {},\n  SERVER_URL: 'https://api.parse.com/1',\n  SERVER_AUTH_TYPE: null,\n  SERVER_AUTH_TOKEN: null,\n  LIVEQUERY_SERVER_URL: null,\n  ENCRYPTED_KEY: null,\n  VERSION: 'js' + \"3.4.2\",\n  APPLICATION_ID: null,\n  JAVASCRIPT_KEY: null,\n  MASTER_KEY: null,\n  USE_MASTER_KEY: false,\n  PERFORM_USER_REWRITE: true,\n  FORCE_REVOCABLE_SESSION: false,\n  ENCRYPTED_USER: false,\n  IDEMPOTENCY: false,\n  ALLOW_CUSTOM_OBJECT_ID: false\n};\n\nfunction requireMethods(name\n/*: string*/\n, methods\n/*: Array<string>*/\n, controller\n/*: any*/\n) {\n  methods.forEach(func => {\n    if (typeof controller[func] !== 'function') {\n      throw new Error(`${name} must implement ${func}()`);\n    }\n  });\n}\n\nmodule.exports = {\n  get: function (key\n  /*: string*/\n  )\n  /*: any*/\n  {\n    if (config.hasOwnProperty(key)) {\n      return config[key];\n    }\n\n    throw new Error('Configuration key not found: ' + key);\n  },\n  set: function (key\n  /*: string*/\n  , value\n  /*: any*/\n  )\n  /*: void*/\n  {\n    config[key] = value;\n  },\n\n  /* Specialized Controller Setters/Getters */\n  setAnalyticsController(controller\n  /*: AnalyticsController*/\n  ) {\n    requireMethods('AnalyticsController', ['track'], controller);\n    config['AnalyticsController'] = controller;\n  },\n\n  getAnalyticsController()\n  /*: AnalyticsController*/\n  {\n    return config['AnalyticsController'];\n  },\n\n  setCloudController(controller\n  /*: CloudController*/\n  ) {\n    requireMethods('CloudController', ['run', 'getJobsData', 'startJob'], controller);\n    config['CloudController'] = controller;\n  },\n\n  getCloudController()\n  /*: CloudController*/\n  {\n    return config['CloudController'];\n  },\n\n  setConfigController(controller\n  /*: ConfigController*/\n  ) {\n    requireMethods('ConfigController', ['current', 'get', 'save'], controller);\n    config['ConfigController'] = controller;\n  },\n\n  getConfigController()\n  /*: ConfigController*/\n  {\n    return config['ConfigController'];\n  },\n\n  setCryptoController(controller\n  /*: CryptoController*/\n  ) {\n    requireMethods('CryptoController', ['encrypt', 'decrypt'], controller);\n    config['CryptoController'] = controller;\n  },\n\n  getCryptoController()\n  /*: CryptoController*/\n  {\n    return config['CryptoController'];\n  },\n\n  setFileController(controller\n  /*: FileController*/\n  ) {\n    requireMethods('FileController', ['saveFile', 'saveBase64'], controller);\n    config['FileController'] = controller;\n  },\n\n  getFileController()\n  /*: FileController*/\n  {\n    return config['FileController'];\n  },\n\n  setInstallationController(controller\n  /*: InstallationController*/\n  ) {\n    requireMethods('InstallationController', ['currentInstallationId'], controller);\n    config['InstallationController'] = controller;\n  },\n\n  getInstallationController()\n  /*: InstallationController*/\n  {\n    return config['InstallationController'];\n  },\n\n  setObjectController(controller\n  /*: ObjectController*/\n  ) {\n    requireMethods('ObjectController', ['save', 'fetch', 'destroy'], controller);\n    config['ObjectController'] = controller;\n  },\n\n  getObjectController()\n  /*: ObjectController*/\n  {\n    return config['ObjectController'];\n  },\n\n  setObjectStateController(controller\n  /*: ObjectStateController*/\n  ) {\n    requireMethods('ObjectStateController', ['getState', 'initializeState', 'removeState', 'getServerData', 'setServerData', 'getPendingOps', 'setPendingOp', 'pushPendingState', 'popPendingState', 'mergeFirstPendingState', 'getObjectCache', 'estimateAttribute', 'estimateAttributes', 'commitServerChanges', 'enqueueTask', 'clearAllState'], controller);\n    config['ObjectStateController'] = controller;\n  },\n\n  getObjectStateController()\n  /*: ObjectStateController*/\n  {\n    return config['ObjectStateController'];\n  },\n\n  setPushController(controller\n  /*: PushController*/\n  ) {\n    requireMethods('PushController', ['send'], controller);\n    config['PushController'] = controller;\n  },\n\n  getPushController()\n  /*: PushController*/\n  {\n    return config['PushController'];\n  },\n\n  setQueryController(controller\n  /*: QueryController*/\n  ) {\n    requireMethods('QueryController', ['find', 'aggregate'], controller);\n    config['QueryController'] = controller;\n  },\n\n  getQueryController()\n  /*: QueryController*/\n  {\n    return config['QueryController'];\n  },\n\n  setRESTController(controller\n  /*: RESTController*/\n  ) {\n    requireMethods('RESTController', ['request', 'ajax'], controller);\n    config['RESTController'] = controller;\n  },\n\n  getRESTController()\n  /*: RESTController*/\n  {\n    return config['RESTController'];\n  },\n\n  setSchemaController(controller\n  /*: SchemaController*/\n  ) {\n    requireMethods('SchemaController', ['get', 'create', 'update', 'delete', 'send', 'purge'], controller);\n    config['SchemaController'] = controller;\n  },\n\n  getSchemaController()\n  /*: SchemaController*/\n  {\n    return config['SchemaController'];\n  },\n\n  setSessionController(controller\n  /*: SessionController*/\n  ) {\n    requireMethods('SessionController', ['getSession'], controller);\n    config['SessionController'] = controller;\n  },\n\n  getSessionController()\n  /*: SessionController*/\n  {\n    return config['SessionController'];\n  },\n\n  setStorageController(controller\n  /*: StorageController*/\n  ) {\n    if (controller.async) {\n      requireMethods('An async StorageController', ['getItemAsync', 'setItemAsync', 'removeItemAsync', 'getAllKeysAsync'], controller);\n    } else {\n      requireMethods('A synchronous StorageController', ['getItem', 'setItem', 'removeItem', 'getAllKeys'], controller);\n    }\n\n    config['StorageController'] = controller;\n  },\n\n  setLocalDatastoreController(controller\n  /*: LocalDatastoreController*/\n  ) {\n    requireMethods('LocalDatastoreController', ['pinWithName', 'fromPinWithName', 'unPinWithName', 'getAllContents', 'clear'], controller);\n    config['LocalDatastoreController'] = controller;\n  },\n\n  getLocalDatastoreController()\n  /*: LocalDatastoreController*/\n  {\n    return config['LocalDatastoreController'];\n  },\n\n  setLocalDatastore(store\n  /*: any*/\n  ) {\n    config['LocalDatastore'] = store;\n  },\n\n  getLocalDatastore() {\n    return config['LocalDatastore'];\n  },\n\n  getStorageController()\n  /*: StorageController*/\n  {\n    return config['StorageController'];\n  },\n\n  setAsyncStorage(storage\n  /*: any*/\n  ) {\n    config['AsyncStorage'] = storage;\n  },\n\n  getAsyncStorage() {\n    return config['AsyncStorage'];\n  },\n\n  setWebSocketController(controller\n  /*: WebSocketController*/\n  ) {\n    config['WebSocketController'] = controller;\n  },\n\n  getWebSocketController()\n  /*: WebSocketController*/\n  {\n    return config['WebSocketController'];\n  },\n\n  setUserController(controller\n  /*: UserController*/\n  ) {\n    requireMethods('UserController', ['setCurrentUser', 'currentUser', 'currentUserAsync', 'signUp', 'logIn', 'become', 'logOut', 'me', 'requestPasswordReset', 'upgradeToRevocableSession', 'requestEmailVerification', 'verifyPassword', 'linkWith'], controller);\n    config['UserController'] = controller;\n  },\n\n  getUserController()\n  /*: UserController*/\n  {\n    return config['UserController'];\n  },\n\n  setLiveQueryController(controller\n  /*: any*/\n  ) {\n    requireMethods('LiveQueryController', ['setDefaultLiveQueryClient', 'getDefaultLiveQueryClient', '_clearCachedDefaultClient'], controller);\n    config['LiveQueryController'] = controller;\n  },\n\n  getLiveQueryController()\n  /*: any*/\n  {\n    return config['LiveQueryController'];\n  },\n\n  setHooksController(controller\n  /*: HooksController*/\n  ) {\n    requireMethods('HooksController', ['create', 'get', 'update', 'remove'], controller);\n    config['HooksController'] = controller;\n  },\n\n  getHooksController()\n  /*: HooksController*/\n  {\n    return config['HooksController'];\n  }\n\n};"]},"metadata":{},"sourceType":"script"}