{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _ParseUser = _interopRequireDefault(require(\"./ParseUser\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * Copyright (c) 2015-present, Parse, LLC.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @flow-weak\n */\n\n/* global FB */\n\n\nlet initialized = false;\nlet requestedPermissions;\nlet initOptions;\nconst provider = {\n  authenticate(options) {\n    if (typeof FB === 'undefined') {\n      options.error(this, 'Facebook SDK not found.');\n    }\n\n    FB.login(response => {\n      if (response.authResponse) {\n        if (options.success) {\n          options.success(this, {\n            id: response.authResponse.userID,\n            access_token: response.authResponse.accessToken,\n            expiration_date: new Date(response.authResponse.expiresIn * 1000 + new Date().getTime()).toJSON()\n          });\n        }\n      } else {\n        if (options.error) {\n          options.error(this, response);\n        }\n      }\n    }, {\n      scope: requestedPermissions\n    });\n  },\n\n  restoreAuthentication(authData) {\n    if (authData) {\n      const newOptions = {};\n\n      if (initOptions) {\n        for (const key in initOptions) {\n          newOptions[key] = initOptions[key];\n        }\n      } // Suppress checks for login status from the browser.\n\n\n      newOptions.status = false; // If the user doesn't match the one known by the FB SDK, log out.\n      // Most of the time, the users will match -- it's only in cases where\n      // the FB SDK knows of a different user than the one being restored\n      // from a Parse User that logged in with username/password.\n\n      const existingResponse = FB.getAuthResponse();\n\n      if (existingResponse && existingResponse.userID !== authData.id) {\n        FB.logout();\n      }\n\n      FB.init(newOptions);\n    }\n\n    return true;\n  },\n\n  getAuthType() {\n    return 'facebook';\n  },\n\n  deauthenticate() {\n    this.restoreAuthentication(null);\n  }\n\n};\n/**\n * Provides a set of utilities for using Parse with Facebook.\n *\n * @class Parse.FacebookUtils\n * @static\n * @hideconstructor\n */\n\nconst FacebookUtils = {\n  /**\n   * Initializes Parse Facebook integration.  Call this function after you\n   * have loaded the Facebook Javascript SDK with the same parameters\n   * as you would pass to<code>\n   * <a href=\n   * \"https://developers.facebook.com/docs/reference/javascript/FB.init/\">\n   * FB.init()</a></code>.  Parse.FacebookUtils will invoke FB.init() for you\n   * with these arguments.\n   *\n   * @function init\n   * @name Parse.FacebookUtils.init\n   * @param {object} options Facebook options argument as described here:\n   *   <a href=\n   *   \"https://developers.facebook.com/docs/reference/javascript/FB.init/\">\n   *   FB.init()</a>. The status flag will be coerced to 'false' because it\n   *   interferes with Parse Facebook integration. Call FB.getLoginStatus()\n   *   explicitly if this behavior is required by your application.\n   */\n  init(options) {\n    if (typeof FB === 'undefined') {\n      throw new Error('The Facebook JavaScript SDK must be loaded before calling init.');\n    }\n\n    initOptions = {};\n\n    if (options) {\n      for (const key in options) {\n        initOptions[key] = options[key];\n      }\n    }\n\n    if (initOptions.status && typeof console !== 'undefined') {\n      const warn = console.warn || console.log || function () {}; // eslint-disable-line no-console\n\n\n      warn.call(console, 'The \"status\" flag passed into' + ' FB.init, when set to true, can interfere with Parse Facebook' + ' integration, so it has been suppressed. Please call' + ' FB.getLoginStatus() explicitly if you require this behavior.');\n    }\n\n    initOptions.status = false;\n    FB.init(initOptions);\n\n    _ParseUser.default._registerAuthenticationProvider(provider);\n\n    initialized = true;\n  },\n\n  /**\n   * Gets whether the user has their account linked to Facebook.\n   *\n   * @function isLinked\n   * @name Parse.FacebookUtils.isLinked\n   * @param {Parse.User} user User to check for a facebook link.\n   *     The user must be logged in on this device.\n   * @returns {boolean} <code>true</code> if the user has their account\n   *     linked to Facebook.\n   */\n  isLinked(user) {\n    return user._isLinked('facebook');\n  },\n\n  /**\n   * Logs in a user using Facebook. This method delegates to the Facebook\n   * SDK to authenticate the user, and then automatically logs in (or\n   * creates, in the case where it is a new user) a Parse.User.\n   *\n   * Standard API:\n   *\n   * <code>logIn(permission: string, authData: Object);</code>\n   *\n   * Advanced API: Used for handling your own oAuth tokens\n   * {@link https://docs.parseplatform.org/rest/guide/#linking-users}\n   *\n   * <code>logIn(authData: Object, options?: Object);</code>\n   *\n   * @function logIn\n   * @name Parse.FacebookUtils.logIn\n   * @param {(string | object)} permissions The permissions required for Facebook\n   *    log in.  This is a comma-separated string of permissions.\n   *    Alternatively, supply a Facebook authData object as described in our\n   *    REST API docs if you want to handle getting facebook auth tokens\n   *    yourself.\n   * @param {object} options MasterKey / SessionToken. Alternatively can be used for authData if permissions is a string\n   * @returns {Promise}\n   */\n  logIn(permissions, options) {\n    if (!permissions || typeof permissions === 'string') {\n      if (!initialized) {\n        throw new Error('You must initialize FacebookUtils before calling logIn.');\n      }\n\n      requestedPermissions = permissions;\n      return _ParseUser.default.logInWith('facebook', options);\n    }\n\n    return _ParseUser.default.logInWith('facebook', {\n      authData: permissions\n    }, options);\n  },\n\n  /**\n   * Links Facebook to an existing PFUser. This method delegates to the\n   * Facebook SDK to authenticate the user, and then automatically links\n   * the account to the Parse.User.\n   *\n   * Standard API:\n   *\n   * <code>link(user: Parse.User, permission: string, authData?: Object);</code>\n   *\n   * Advanced API: Used for handling your own oAuth tokens\n   * {@link https://docs.parseplatform.org/rest/guide/#linking-users}\n   *\n   * <code>link(user: Parse.User, authData: Object, options?: FullOptions);</code>\n   *\n   * @function link\n   * @name Parse.FacebookUtils.link\n   * @param {Parse.User} user User to link to Facebook. This must be the\n   *     current user.\n   * @param {(string | object)} permissions The permissions required for Facebook\n   *    log in.  This is a comma-separated string of permissions.\n   *    Alternatively, supply a Facebook authData object as described in our\n   *    REST API docs if you want to handle getting facebook auth tokens\n   *    yourself.\n   * @param {object} options MasterKey / SessionToken. Alternatively can be used for authData if permissions is a string\n   * @returns {Promise}\n   */\n  link(user, permissions, options) {\n    if (!permissions || typeof permissions === 'string') {\n      if (!initialized) {\n        throw new Error('You must initialize FacebookUtils before calling link.');\n      }\n\n      requestedPermissions = permissions;\n      return user.linkWith('facebook', options);\n    }\n\n    return user.linkWith('facebook', {\n      authData: permissions\n    }, options);\n  },\n\n  /**\n   * Unlinks the Parse.User from a Facebook account.\n   *\n   * @function unlink\n   * @name Parse.FacebookUtils.unlink\n   * @param {Parse.User} user User to unlink from Facebook. This must be the\n   *     current user.\n   * @param {object} options Standard options object with success and error\n   *    callbacks.\n   * @returns {Promise}\n   */\n  unlink: function (user, options) {\n    if (!initialized) {\n      throw new Error('You must initialize FacebookUtils before calling unlink.');\n    }\n\n    return user._unlinkFrom('facebook', options);\n  },\n\n  // Used for testing purposes\n  _getAuthProvider() {\n    return provider;\n  }\n\n};\nvar _default = FacebookUtils;\nexports.default = _default;","map":{"version":3,"sources":["/Users/szd/Dev/ycomms-smoketest-landing-page/node_modules/parse/lib/node/FacebookUtils.js"],"names":["Object","defineProperty","exports","value","default","_ParseUser","_interopRequireDefault","require","obj","__esModule","initialized","requestedPermissions","initOptions","provider","authenticate","options","FB","error","login","response","authResponse","success","id","userID","access_token","accessToken","expiration_date","Date","expiresIn","getTime","toJSON","scope","restoreAuthentication","authData","newOptions","key","status","existingResponse","getAuthResponse","logout","init","getAuthType","deauthenticate","FacebookUtils","Error","console","warn","log","call","_registerAuthenticationProvider","isLinked","user","_isLinked","logIn","permissions","logInWith","link","linkWith","unlink","_unlinkFrom","_getAuthProvider","_default"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _ParseUser = _interopRequireDefault(require(\"./ParseUser\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * Copyright (c) 2015-present, Parse, LLC.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @flow-weak\n */\n\n/* global FB */\n\n\nlet initialized = false;\nlet requestedPermissions;\nlet initOptions;\nconst provider = {\n  authenticate(options) {\n    if (typeof FB === 'undefined') {\n      options.error(this, 'Facebook SDK not found.');\n    }\n\n    FB.login(response => {\n      if (response.authResponse) {\n        if (options.success) {\n          options.success(this, {\n            id: response.authResponse.userID,\n            access_token: response.authResponse.accessToken,\n            expiration_date: new Date(response.authResponse.expiresIn * 1000 + new Date().getTime()).toJSON()\n          });\n        }\n      } else {\n        if (options.error) {\n          options.error(this, response);\n        }\n      }\n    }, {\n      scope: requestedPermissions\n    });\n  },\n\n  restoreAuthentication(authData) {\n    if (authData) {\n      const newOptions = {};\n\n      if (initOptions) {\n        for (const key in initOptions) {\n          newOptions[key] = initOptions[key];\n        }\n      } // Suppress checks for login status from the browser.\n\n\n      newOptions.status = false; // If the user doesn't match the one known by the FB SDK, log out.\n      // Most of the time, the users will match -- it's only in cases where\n      // the FB SDK knows of a different user than the one being restored\n      // from a Parse User that logged in with username/password.\n\n      const existingResponse = FB.getAuthResponse();\n\n      if (existingResponse && existingResponse.userID !== authData.id) {\n        FB.logout();\n      }\n\n      FB.init(newOptions);\n    }\n\n    return true;\n  },\n\n  getAuthType() {\n    return 'facebook';\n  },\n\n  deauthenticate() {\n    this.restoreAuthentication(null);\n  }\n\n};\n/**\n * Provides a set of utilities for using Parse with Facebook.\n *\n * @class Parse.FacebookUtils\n * @static\n * @hideconstructor\n */\n\nconst FacebookUtils = {\n  /**\n   * Initializes Parse Facebook integration.  Call this function after you\n   * have loaded the Facebook Javascript SDK with the same parameters\n   * as you would pass to<code>\n   * <a href=\n   * \"https://developers.facebook.com/docs/reference/javascript/FB.init/\">\n   * FB.init()</a></code>.  Parse.FacebookUtils will invoke FB.init() for you\n   * with these arguments.\n   *\n   * @function init\n   * @name Parse.FacebookUtils.init\n   * @param {object} options Facebook options argument as described here:\n   *   <a href=\n   *   \"https://developers.facebook.com/docs/reference/javascript/FB.init/\">\n   *   FB.init()</a>. The status flag will be coerced to 'false' because it\n   *   interferes with Parse Facebook integration. Call FB.getLoginStatus()\n   *   explicitly if this behavior is required by your application.\n   */\n  init(options) {\n    if (typeof FB === 'undefined') {\n      throw new Error('The Facebook JavaScript SDK must be loaded before calling init.');\n    }\n\n    initOptions = {};\n\n    if (options) {\n      for (const key in options) {\n        initOptions[key] = options[key];\n      }\n    }\n\n    if (initOptions.status && typeof console !== 'undefined') {\n      const warn = console.warn || console.log || function () {}; // eslint-disable-line no-console\n\n\n      warn.call(console, 'The \"status\" flag passed into' + ' FB.init, when set to true, can interfere with Parse Facebook' + ' integration, so it has been suppressed. Please call' + ' FB.getLoginStatus() explicitly if you require this behavior.');\n    }\n\n    initOptions.status = false;\n    FB.init(initOptions);\n\n    _ParseUser.default._registerAuthenticationProvider(provider);\n\n    initialized = true;\n  },\n\n  /**\n   * Gets whether the user has their account linked to Facebook.\n   *\n   * @function isLinked\n   * @name Parse.FacebookUtils.isLinked\n   * @param {Parse.User} user User to check for a facebook link.\n   *     The user must be logged in on this device.\n   * @returns {boolean} <code>true</code> if the user has their account\n   *     linked to Facebook.\n   */\n  isLinked(user) {\n    return user._isLinked('facebook');\n  },\n\n  /**\n   * Logs in a user using Facebook. This method delegates to the Facebook\n   * SDK to authenticate the user, and then automatically logs in (or\n   * creates, in the case where it is a new user) a Parse.User.\n   *\n   * Standard API:\n   *\n   * <code>logIn(permission: string, authData: Object);</code>\n   *\n   * Advanced API: Used for handling your own oAuth tokens\n   * {@link https://docs.parseplatform.org/rest/guide/#linking-users}\n   *\n   * <code>logIn(authData: Object, options?: Object);</code>\n   *\n   * @function logIn\n   * @name Parse.FacebookUtils.logIn\n   * @param {(string | object)} permissions The permissions required for Facebook\n   *    log in.  This is a comma-separated string of permissions.\n   *    Alternatively, supply a Facebook authData object as described in our\n   *    REST API docs if you want to handle getting facebook auth tokens\n   *    yourself.\n   * @param {object} options MasterKey / SessionToken. Alternatively can be used for authData if permissions is a string\n   * @returns {Promise}\n   */\n  logIn(permissions, options) {\n    if (!permissions || typeof permissions === 'string') {\n      if (!initialized) {\n        throw new Error('You must initialize FacebookUtils before calling logIn.');\n      }\n\n      requestedPermissions = permissions;\n      return _ParseUser.default.logInWith('facebook', options);\n    }\n\n    return _ParseUser.default.logInWith('facebook', {\n      authData: permissions\n    }, options);\n  },\n\n  /**\n   * Links Facebook to an existing PFUser. This method delegates to the\n   * Facebook SDK to authenticate the user, and then automatically links\n   * the account to the Parse.User.\n   *\n   * Standard API:\n   *\n   * <code>link(user: Parse.User, permission: string, authData?: Object);</code>\n   *\n   * Advanced API: Used for handling your own oAuth tokens\n   * {@link https://docs.parseplatform.org/rest/guide/#linking-users}\n   *\n   * <code>link(user: Parse.User, authData: Object, options?: FullOptions);</code>\n   *\n   * @function link\n   * @name Parse.FacebookUtils.link\n   * @param {Parse.User} user User to link to Facebook. This must be the\n   *     current user.\n   * @param {(string | object)} permissions The permissions required for Facebook\n   *    log in.  This is a comma-separated string of permissions.\n   *    Alternatively, supply a Facebook authData object as described in our\n   *    REST API docs if you want to handle getting facebook auth tokens\n   *    yourself.\n   * @param {object} options MasterKey / SessionToken. Alternatively can be used for authData if permissions is a string\n   * @returns {Promise}\n   */\n  link(user, permissions, options) {\n    if (!permissions || typeof permissions === 'string') {\n      if (!initialized) {\n        throw new Error('You must initialize FacebookUtils before calling link.');\n      }\n\n      requestedPermissions = permissions;\n      return user.linkWith('facebook', options);\n    }\n\n    return user.linkWith('facebook', {\n      authData: permissions\n    }, options);\n  },\n\n  /**\n   * Unlinks the Parse.User from a Facebook account.\n   *\n   * @function unlink\n   * @name Parse.FacebookUtils.unlink\n   * @param {Parse.User} user User to unlink from Facebook. This must be the\n   *     current user.\n   * @param {object} options Standard options object with success and error\n   *    callbacks.\n   * @returns {Promise}\n   */\n  unlink: function (user, options) {\n    if (!initialized) {\n      throw new Error('You must initialize FacebookUtils before calling unlink.');\n    }\n\n    return user._unlinkFrom('facebook', options);\n  },\n\n  // Used for testing purposes\n  _getAuthProvider() {\n    return provider;\n  }\n\n};\nvar _default = FacebookUtils;\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}