{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _EventEmitter = _interopRequireDefault(require(\"./EventEmitter\"));\n\nvar _CoreManager = _interopRequireDefault(require(\"./CoreManager\"));\n\nvar _promiseUtils = require(\"./promiseUtils\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/*\n * Copyright (c) 2015-present, Parse, LLC.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n */\n\n/**\n * Creates a new LiveQuery Subscription.\n * Extends events.EventEmitter\n * <a href=\"https://nodejs.org/api/events.html#events_class_eventemitter\">cloud functions</a>.\n *\n * <p>Response Object - Contains data from the client that made the request\n * <ul>\n * <li>clientId</li>\n * <li>installationId - requires Parse Server 4.0.0+</li>\n * </ul>\n * </p>\n *\n * <p>Open Event - When you call query.subscribe(), we send a subscribe request to\n * the LiveQuery server, when we get the confirmation from the LiveQuery server,\n * this event will be emitted. When the client loses WebSocket connection to the\n * LiveQuery server, we will try to auto reconnect the LiveQuery server. If we\n * reconnect the LiveQuery server and successfully resubscribe the ParseQuery,\n * you'll also get this event.\n *\n * <pre>\n * subscription.on('open', (response) => {\n *\n * });</pre></p>\n *\n * <p>Create Event - When a new ParseObject is created and it fulfills the ParseQuery you subscribe,\n * you'll get this event. The object is the ParseObject which is created.\n *\n * <pre>\n * subscription.on('create', (object, response) => {\n *\n * });</pre></p>\n *\n * <p>Update Event - When an existing ParseObject (original) which fulfills the ParseQuery you subscribe\n * is updated (The ParseObject fulfills the ParseQuery before and after changes),\n * you'll get this event. The object is the ParseObject which is updated.\n * Its content is the latest value of the ParseObject.\n *\n * Parse-Server 3.1.3+ Required for original object parameter\n *\n * <pre>\n * subscription.on('update', (object, original, response) => {\n *\n * });</pre></p>\n *\n * <p>Enter Event - When an existing ParseObject's (original) old value doesn't fulfill the ParseQuery\n * but its new value fulfills the ParseQuery, you'll get this event. The object is the\n * ParseObject which enters the ParseQuery. Its content is the latest value of the ParseObject.\n *\n * Parse-Server 3.1.3+ Required for original object parameter\n *\n * <pre>\n * subscription.on('enter', (object, original, response) => {\n *\n * });</pre></p>\n *\n *\n * <p>Update Event - When an existing ParseObject's old value fulfills the ParseQuery but its new value\n * doesn't fulfill the ParseQuery, you'll get this event. The object is the ParseObject\n * which leaves the ParseQuery. Its content is the latest value of the ParseObject.\n *\n * <pre>\n * subscription.on('leave', (object, response) => {\n *\n * });</pre></p>\n *\n *\n * <p>Delete Event - When an existing ParseObject which fulfills the ParseQuery is deleted, you'll\n * get this event. The object is the ParseObject which is deleted.\n *\n * <pre>\n * subscription.on('delete', (object, response) => {\n *\n * });</pre></p>\n *\n *\n * <p>Close Event - When the client loses the WebSocket connection to the LiveQuery\n * server and we stop receiving events, you'll get this event.\n *\n * <pre>\n * subscription.on('close', () => {\n *\n * });</pre></p>\n *\n * @alias Parse.LiveQuerySubscription\n */\n\n\nclass Subscription extends _EventEmitter.default {\n  /*\n   * @param {string} id - subscription id\n   * @param {string} query - query to subscribe to\n   * @param {string} sessionToken - optional session token\n   */\n  constructor(id, query, sessionToken) {\n    super();\n    this.id = id;\n    this.query = query;\n    this.sessionToken = sessionToken;\n    this.subscribePromise = (0, _promiseUtils.resolvingPromise)();\n    this.subscribed = false; // adding listener so process does not crash\n    // best practice is for developer to register their own listener\n\n    this.on('error', () => {});\n  }\n  /**\n   * Close the subscription\n   *\n   * @returns {Promise}\n   */\n\n\n  unsubscribe()\n  /*: Promise*/\n  {\n    return _CoreManager.default.getLiveQueryController().getDefaultLiveQueryClient().then(liveQueryClient => {\n      liveQueryClient.unsubscribe(this);\n      this.emit('close');\n    });\n  }\n\n}\n\nvar _default = Subscription;\nexports.default = _default;","map":{"version":3,"sources":["/Users/szd/Dev/ycomms-smoketest-landing-page/node_modules/parse/lib/node/LiveQuerySubscription.js"],"names":["Object","defineProperty","exports","value","default","_EventEmitter","_interopRequireDefault","require","_CoreManager","_promiseUtils","obj","__esModule","Subscription","constructor","id","query","sessionToken","subscribePromise","resolvingPromise","subscribed","on","unsubscribe","getLiveQueryController","getDefaultLiveQueryClient","then","liveQueryClient","emit","_default"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;;AAEA,IAAIC,aAAa,GAAGC,sBAAsB,CAACC,OAAO,CAAC,gBAAD,CAAR,CAA1C;;AAEA,IAAIC,YAAY,GAAGF,sBAAsB,CAACC,OAAO,CAAC,eAAD,CAAR,CAAzC;;AAEA,IAAIE,aAAa,GAAGF,OAAO,CAAC,gBAAD,CAA3B;;AAEA,SAASD,sBAAT,CAAgCI,GAAhC,EAAqC;AACnC,SAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;AACnCN,IAAAA,OAAO,EAAEM;AAD0B,GAArC;AAGD;AACD;;;;;;;;;;AAUA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuFA,MAAME,YAAN,SAA2BP,aAAa,CAACD,OAAzC,CAAiD;AAC/C;;;;;AAKAS,EAAAA,WAAW,CAACC,EAAD,EAAKC,KAAL,EAAYC,YAAZ,EAA0B;AACnC;AACA,SAAKF,EAAL,GAAUA,EAAV;AACA,SAAKC,KAAL,GAAaA,KAAb;AACA,SAAKC,YAAL,GAAoBA,YAApB;AACA,SAAKC,gBAAL,GAAwB,CAAC,GAAGR,aAAa,CAACS,gBAAlB,GAAxB;AACA,SAAKC,UAAL,GAAkB,KAAlB,CANmC,CAMV;AACzB;;AAEA,SAAKC,EAAL,CAAQ,OAAR,EAAiB,MAAM,CAAE,CAAzB;AACD;AACD;;;;;;;AAOAC,EAAAA,WAAW;AACX;AACA;AACE,WAAOb,YAAY,CAACJ,OAAb,CAAqBkB,sBAArB,GAA8CC,yBAA9C,GAA0EC,IAA1E,CAA+EC,eAAe,IAAI;AACvGA,MAAAA,eAAe,CAACJ,WAAhB,CAA4B,IAA5B;AACA,WAAKK,IAAL,CAAU,OAAV;AACD,KAHM,CAAP;AAID;;AA/B8C;;AAmCjD,IAAIC,QAAQ,GAAGf,YAAf;AACAV,OAAO,CAACE,OAAR,GAAkBuB,QAAlB","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _EventEmitter = _interopRequireDefault(require(\"./EventEmitter\"));\n\nvar _CoreManager = _interopRequireDefault(require(\"./CoreManager\"));\n\nvar _promiseUtils = require(\"./promiseUtils\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/*\n * Copyright (c) 2015-present, Parse, LLC.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n */\n\n/**\n * Creates a new LiveQuery Subscription.\n * Extends events.EventEmitter\n * <a href=\"https://nodejs.org/api/events.html#events_class_eventemitter\">cloud functions</a>.\n *\n * <p>Response Object - Contains data from the client that made the request\n * <ul>\n * <li>clientId</li>\n * <li>installationId - requires Parse Server 4.0.0+</li>\n * </ul>\n * </p>\n *\n * <p>Open Event - When you call query.subscribe(), we send a subscribe request to\n * the LiveQuery server, when we get the confirmation from the LiveQuery server,\n * this event will be emitted. When the client loses WebSocket connection to the\n * LiveQuery server, we will try to auto reconnect the LiveQuery server. If we\n * reconnect the LiveQuery server and successfully resubscribe the ParseQuery,\n * you'll also get this event.\n *\n * <pre>\n * subscription.on('open', (response) => {\n *\n * });</pre></p>\n *\n * <p>Create Event - When a new ParseObject is created and it fulfills the ParseQuery you subscribe,\n * you'll get this event. The object is the ParseObject which is created.\n *\n * <pre>\n * subscription.on('create', (object, response) => {\n *\n * });</pre></p>\n *\n * <p>Update Event - When an existing ParseObject (original) which fulfills the ParseQuery you subscribe\n * is updated (The ParseObject fulfills the ParseQuery before and after changes),\n * you'll get this event. The object is the ParseObject which is updated.\n * Its content is the latest value of the ParseObject.\n *\n * Parse-Server 3.1.3+ Required for original object parameter\n *\n * <pre>\n * subscription.on('update', (object, original, response) => {\n *\n * });</pre></p>\n *\n * <p>Enter Event - When an existing ParseObject's (original) old value doesn't fulfill the ParseQuery\n * but its new value fulfills the ParseQuery, you'll get this event. The object is the\n * ParseObject which enters the ParseQuery. Its content is the latest value of the ParseObject.\n *\n * Parse-Server 3.1.3+ Required for original object parameter\n *\n * <pre>\n * subscription.on('enter', (object, original, response) => {\n *\n * });</pre></p>\n *\n *\n * <p>Update Event - When an existing ParseObject's old value fulfills the ParseQuery but its new value\n * doesn't fulfill the ParseQuery, you'll get this event. The object is the ParseObject\n * which leaves the ParseQuery. Its content is the latest value of the ParseObject.\n *\n * <pre>\n * subscription.on('leave', (object, response) => {\n *\n * });</pre></p>\n *\n *\n * <p>Delete Event - When an existing ParseObject which fulfills the ParseQuery is deleted, you'll\n * get this event. The object is the ParseObject which is deleted.\n *\n * <pre>\n * subscription.on('delete', (object, response) => {\n *\n * });</pre></p>\n *\n *\n * <p>Close Event - When the client loses the WebSocket connection to the LiveQuery\n * server and we stop receiving events, you'll get this event.\n *\n * <pre>\n * subscription.on('close', () => {\n *\n * });</pre></p>\n *\n * @alias Parse.LiveQuerySubscription\n */\n\n\nclass Subscription extends _EventEmitter.default {\n  /*\n   * @param {string} id - subscription id\n   * @param {string} query - query to subscribe to\n   * @param {string} sessionToken - optional session token\n   */\n  constructor(id, query, sessionToken) {\n    super();\n    this.id = id;\n    this.query = query;\n    this.sessionToken = sessionToken;\n    this.subscribePromise = (0, _promiseUtils.resolvingPromise)();\n    this.subscribed = false; // adding listener so process does not crash\n    // best practice is for developer to register their own listener\n\n    this.on('error', () => {});\n  }\n  /**\n   * Close the subscription\n   *\n   * @returns {Promise}\n   */\n\n\n  unsubscribe()\n  /*: Promise*/\n  {\n    return _CoreManager.default.getLiveQueryController().getDefaultLiveQueryClient().then(liveQueryClient => {\n      liveQueryClient.unsubscribe(this);\n      this.emit('close');\n    });\n  }\n\n}\n\nvar _default = Subscription;\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}