{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _EventEmitter = _interopRequireDefault(require(\"./EventEmitter\"));\n\nvar _LiveQueryClient = _interopRequireDefault(require(\"./LiveQueryClient\"));\n\nvar _CoreManager = _interopRequireDefault(require(\"./CoreManager\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * Copyright (c) 2015-present, Parse, LLC.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @flow\n */\n\n\nfunction getLiveQueryClient()\n/*: LiveQueryClient*/\n{\n  return _CoreManager.default.getLiveQueryController().getDefaultLiveQueryClient();\n}\n/**\n * We expose three events to help you monitor the status of the WebSocket connection:\n *\n * <p>Open - When we establish the WebSocket connection to the LiveQuery server, you'll get this event.\n *\n * <pre>\n * Parse.LiveQuery.on('open', () => {\n *\n * });</pre></p>\n *\n * <p>Close - When we lose the WebSocket connection to the LiveQuery server, you'll get this event.\n *\n * <pre>\n * Parse.LiveQuery.on('close', () => {\n *\n * });</pre></p>\n *\n * <p>Error - When some network error or LiveQuery server error happens, you'll get this event.\n *\n * <pre>\n * Parse.LiveQuery.on('error', (error) => {\n *\n * });</pre></p>\n *\n * @class Parse.LiveQuery\n * @static\n */\n\n\nconst LiveQuery = new _EventEmitter.default();\n/**\n * After open is called, the LiveQuery will try to send a connect request\n * to the LiveQuery server.\n */\n\nLiveQuery.open = async () => {\n  const liveQueryClient = await getLiveQueryClient();\n  liveQueryClient.open();\n};\n/**\n * When you're done using LiveQuery, you can call Parse.LiveQuery.close().\n * This function will close the WebSocket connection to the LiveQuery server,\n * cancel the auto reconnect, and unsubscribe all subscriptions based on it.\n * If you call query.subscribe() after this, we'll create a new WebSocket\n * connection to the LiveQuery server.\n */\n\n\nLiveQuery.close = async () => {\n  const liveQueryClient = await getLiveQueryClient();\n  liveQueryClient.close();\n}; // Register a default onError callback to make sure we do not crash on error\n\n\nLiveQuery.on('error', () => {});\nvar _default = LiveQuery;\nexports.default = _default;\nlet defaultLiveQueryClient;\nconst DefaultLiveQueryController = {\n  setDefaultLiveQueryClient(liveQueryClient\n  /*: LiveQueryClient*/\n  ) {\n    defaultLiveQueryClient = liveQueryClient;\n  },\n\n  async getDefaultLiveQueryClient()\n  /*: Promise<LiveQueryClient>*/\n  {\n    if (defaultLiveQueryClient) {\n      return defaultLiveQueryClient;\n    }\n\n    const [currentUser, installationId] = await Promise.all([_CoreManager.default.getUserController().currentUserAsync(), _CoreManager.default.getInstallationController().currentInstallationId()]);\n    const sessionToken = currentUser ? currentUser.getSessionToken() : undefined;\n\n    let liveQueryServerURL = _CoreManager.default.get('LIVEQUERY_SERVER_URL');\n\n    if (liveQueryServerURL && liveQueryServerURL.indexOf('ws') !== 0) {\n      throw new Error('You need to set a proper Parse LiveQuery server url before using LiveQueryClient');\n    } // If we can not find Parse.liveQueryServerURL, we try to extract it from Parse.serverURL\n\n\n    if (!liveQueryServerURL) {\n      const serverURL = _CoreManager.default.get('SERVER_URL');\n\n      const protocol = serverURL.indexOf('https') === 0 ? 'wss://' : 'ws://';\n      const host = serverURL.replace(/^https?:\\/\\//, '');\n      liveQueryServerURL = protocol + host;\n\n      _CoreManager.default.set('LIVEQUERY_SERVER_URL', liveQueryServerURL);\n    }\n\n    const applicationId = _CoreManager.default.get('APPLICATION_ID');\n\n    const javascriptKey = _CoreManager.default.get('JAVASCRIPT_KEY');\n\n    const masterKey = _CoreManager.default.get('MASTER_KEY');\n\n    defaultLiveQueryClient = new _LiveQueryClient.default({\n      applicationId,\n      serverURL: liveQueryServerURL,\n      javascriptKey,\n      masterKey,\n      sessionToken,\n      installationId\n    });\n    defaultLiveQueryClient.on('error', error => {\n      LiveQuery.emit('error', error);\n    });\n    defaultLiveQueryClient.on('open', () => {\n      LiveQuery.emit('open');\n    });\n    defaultLiveQueryClient.on('close', () => {\n      LiveQuery.emit('close');\n    });\n    return defaultLiveQueryClient;\n  },\n\n  _clearCachedDefaultClient() {\n    defaultLiveQueryClient = null;\n  }\n\n};\n\n_CoreManager.default.setLiveQueryController(DefaultLiveQueryController);","map":{"version":3,"sources":["/Users/szd/Dev/ycomms-smoketest-landing-page/node_modules/parse/lib/node/ParseLiveQuery.js"],"names":["Object","defineProperty","exports","value","default","_EventEmitter","_interopRequireDefault","require","_LiveQueryClient","_CoreManager","obj","__esModule","getLiveQueryClient","getLiveQueryController","getDefaultLiveQueryClient","LiveQuery","open","liveQueryClient","close","on","_default","defaultLiveQueryClient","DefaultLiveQueryController","setDefaultLiveQueryClient","currentUser","installationId","Promise","all","getUserController","currentUserAsync","getInstallationController","currentInstallationId","sessionToken","getSessionToken","undefined","liveQueryServerURL","get","indexOf","Error","serverURL","protocol","host","replace","set","applicationId","javascriptKey","masterKey","error","emit","_clearCachedDefaultClient","setLiveQueryController"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _EventEmitter = _interopRequireDefault(require(\"./EventEmitter\"));\n\nvar _LiveQueryClient = _interopRequireDefault(require(\"./LiveQueryClient\"));\n\nvar _CoreManager = _interopRequireDefault(require(\"./CoreManager\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * Copyright (c) 2015-present, Parse, LLC.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @flow\n */\n\n\nfunction getLiveQueryClient()\n/*: LiveQueryClient*/\n{\n  return _CoreManager.default.getLiveQueryController().getDefaultLiveQueryClient();\n}\n/**\n * We expose three events to help you monitor the status of the WebSocket connection:\n *\n * <p>Open - When we establish the WebSocket connection to the LiveQuery server, you'll get this event.\n *\n * <pre>\n * Parse.LiveQuery.on('open', () => {\n *\n * });</pre></p>\n *\n * <p>Close - When we lose the WebSocket connection to the LiveQuery server, you'll get this event.\n *\n * <pre>\n * Parse.LiveQuery.on('close', () => {\n *\n * });</pre></p>\n *\n * <p>Error - When some network error or LiveQuery server error happens, you'll get this event.\n *\n * <pre>\n * Parse.LiveQuery.on('error', (error) => {\n *\n * });</pre></p>\n *\n * @class Parse.LiveQuery\n * @static\n */\n\n\nconst LiveQuery = new _EventEmitter.default();\n/**\n * After open is called, the LiveQuery will try to send a connect request\n * to the LiveQuery server.\n */\n\nLiveQuery.open = async () => {\n  const liveQueryClient = await getLiveQueryClient();\n  liveQueryClient.open();\n};\n/**\n * When you're done using LiveQuery, you can call Parse.LiveQuery.close().\n * This function will close the WebSocket connection to the LiveQuery server,\n * cancel the auto reconnect, and unsubscribe all subscriptions based on it.\n * If you call query.subscribe() after this, we'll create a new WebSocket\n * connection to the LiveQuery server.\n */\n\n\nLiveQuery.close = async () => {\n  const liveQueryClient = await getLiveQueryClient();\n  liveQueryClient.close();\n}; // Register a default onError callback to make sure we do not crash on error\n\n\nLiveQuery.on('error', () => {});\nvar _default = LiveQuery;\nexports.default = _default;\nlet defaultLiveQueryClient;\nconst DefaultLiveQueryController = {\n  setDefaultLiveQueryClient(liveQueryClient\n  /*: LiveQueryClient*/\n  ) {\n    defaultLiveQueryClient = liveQueryClient;\n  },\n\n  async getDefaultLiveQueryClient()\n  /*: Promise<LiveQueryClient>*/\n  {\n    if (defaultLiveQueryClient) {\n      return defaultLiveQueryClient;\n    }\n\n    const [currentUser, installationId] = await Promise.all([_CoreManager.default.getUserController().currentUserAsync(), _CoreManager.default.getInstallationController().currentInstallationId()]);\n    const sessionToken = currentUser ? currentUser.getSessionToken() : undefined;\n\n    let liveQueryServerURL = _CoreManager.default.get('LIVEQUERY_SERVER_URL');\n\n    if (liveQueryServerURL && liveQueryServerURL.indexOf('ws') !== 0) {\n      throw new Error('You need to set a proper Parse LiveQuery server url before using LiveQueryClient');\n    } // If we can not find Parse.liveQueryServerURL, we try to extract it from Parse.serverURL\n\n\n    if (!liveQueryServerURL) {\n      const serverURL = _CoreManager.default.get('SERVER_URL');\n\n      const protocol = serverURL.indexOf('https') === 0 ? 'wss://' : 'ws://';\n      const host = serverURL.replace(/^https?:\\/\\//, '');\n      liveQueryServerURL = protocol + host;\n\n      _CoreManager.default.set('LIVEQUERY_SERVER_URL', liveQueryServerURL);\n    }\n\n    const applicationId = _CoreManager.default.get('APPLICATION_ID');\n\n    const javascriptKey = _CoreManager.default.get('JAVASCRIPT_KEY');\n\n    const masterKey = _CoreManager.default.get('MASTER_KEY');\n\n    defaultLiveQueryClient = new _LiveQueryClient.default({\n      applicationId,\n      serverURL: liveQueryServerURL,\n      javascriptKey,\n      masterKey,\n      sessionToken,\n      installationId\n    });\n    defaultLiveQueryClient.on('error', error => {\n      LiveQuery.emit('error', error);\n    });\n    defaultLiveQueryClient.on('open', () => {\n      LiveQuery.emit('open');\n    });\n    defaultLiveQueryClient.on('close', () => {\n      LiveQuery.emit('close');\n    });\n    return defaultLiveQueryClient;\n  },\n\n  _clearCachedDefaultClient() {\n    defaultLiveQueryClient = null;\n  }\n\n};\n\n_CoreManager.default.setLiveQueryController(DefaultLiveQueryController);"]},"metadata":{},"sourceType":"script"}